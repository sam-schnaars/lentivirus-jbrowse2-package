"use strict";
/**
 * Copyright (c) 2023-2024 mol* contributors, licensed under MIT, See LICENSE file for more info.
 *
 * @author David Sehnal <david.sehnal@gmail.com>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MVSPrimitiveParams = void 0;
const params_schema_1 = require("../generic/params-schema");
const param_types_1 = require("./param-types");
// TODO: Figure out validation and default values for these
const _LineBase = {
    start: param_types_1.PrimitivePositionT,
    end: param_types_1.PrimitivePositionT,
    thickness: (0, params_schema_1.nullable)(params_schema_1.float),
    color: (0, params_schema_1.nullable)(param_types_1.ColorT),
    dash_length: (0, params_schema_1.nullable)(params_schema_1.float),
};
const MeshParams = (0, params_schema_1.obj)({
    kind: (0, params_schema_1.literal)('mesh'),
    vertices: param_types_1.FloatList,
    indices: param_types_1.IntList,
    triangle_colors: (0, params_schema_1.nullable)(param_types_1.StrList),
    triangle_groups: (0, params_schema_1.nullable)(param_types_1.IntList),
    group_colors: (0, params_schema_1.nullable)((0, params_schema_1.mapping)(params_schema_1.int, param_types_1.ColorT)),
    group_tooltips: (0, params_schema_1.nullable)((0, params_schema_1.mapping)(params_schema_1.int, params_schema_1.str)),
    tooltip: (0, params_schema_1.nullable)(params_schema_1.str),
    show_triangles: (0, params_schema_1.nullable)(params_schema_1.bool),
    show_wireframe: (0, params_schema_1.nullable)(params_schema_1.bool),
    color: (0, params_schema_1.nullable)(param_types_1.ColorT),
    wireframe_radius: (0, params_schema_1.nullable)(params_schema_1.float),
    wireframe_color: (0, params_schema_1.nullable)(param_types_1.ColorT),
});
const LinesParams = (0, params_schema_1.obj)({
    kind: (0, params_schema_1.literal)('lines'),
    vertices: param_types_1.FloatList,
    indices: param_types_1.IntList,
    line_colors: (0, params_schema_1.nullable)(param_types_1.StrList),
    line_groups: (0, params_schema_1.nullable)(param_types_1.IntList),
    group_colors: (0, params_schema_1.nullable)((0, params_schema_1.mapping)(params_schema_1.int, param_types_1.ColorT)),
    group_tooltips: (0, params_schema_1.nullable)((0, params_schema_1.mapping)(params_schema_1.int, params_schema_1.str)),
    group_radius: (0, params_schema_1.nullable)((0, params_schema_1.mapping)(params_schema_1.int, params_schema_1.float)),
    tooltip: (0, params_schema_1.nullable)(params_schema_1.str),
    color: (0, params_schema_1.nullable)(param_types_1.ColorT),
    line_radius: (0, params_schema_1.nullable)(params_schema_1.float),
});
const LineParams = (0, params_schema_1.obj)({
    kind: (0, params_schema_1.literal)('line'),
    ..._LineBase,
    tooltip: (0, params_schema_1.nullable)(params_schema_1.str),
});
const DistanceMeasurementParams = (0, params_schema_1.obj)({
    kind: (0, params_schema_1.literal)('distance_measurement'),
    ..._LineBase,
    label_template: (0, params_schema_1.nullable)(params_schema_1.str),
    label_size: (0, params_schema_1.nullable)((0, params_schema_1.union)([params_schema_1.float, (0, params_schema_1.literal)('auto')])),
    label_auto_size_scale: (0, params_schema_1.nullable)(params_schema_1.float),
    label_auto_size_min: (0, params_schema_1.nullable)(params_schema_1.float),
    label_color: (0, params_schema_1.nullable)(param_types_1.ColorT),
});
const PrimitiveLabelParams = (0, params_schema_1.obj)({
    kind: (0, params_schema_1.literal)('label'),
    position: param_types_1.PrimitivePositionT,
    text: params_schema_1.str,
    label_size: (0, params_schema_1.nullable)(params_schema_1.float),
    label_color: (0, params_schema_1.nullable)(param_types_1.ColorT),
    label_offset: (0, params_schema_1.nullable)(params_schema_1.float),
});
exports.MVSPrimitiveParams = (0, params_schema_1.union)([MeshParams, LinesParams, LineParams, DistanceMeasurementParams, PrimitiveLabelParams]);
