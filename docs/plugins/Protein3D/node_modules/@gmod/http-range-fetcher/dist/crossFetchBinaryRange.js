"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = crossFetchBinaryRange;
//@ts-nocheck
const buffer_1 = require("buffer");
function crossFetchBinaryRange(url_1, start_1, end_1) {
    return __awaiter(this, arguments, void 0, function* (url, start, end, options = {}) {
        const requestDate = new Date();
        const fetchOptions = Object.assign({
            method: 'GET',
            headers: { range: `bytes=${start}-${end}` },
        }, options);
        const res = yield fetch(url, fetchOptions);
        const responseDate = new Date();
        if (res.status !== 206 && res.status !== 200) {
            throw new Error(`HTTP ${res.status} when fetching ${url} bytes ${start}-${end}`);
        }
        if (res.status === 200) {
            // TODO: check that the response satisfies the byte range,
            // and is not too big (check maximum size),
            // because we actually ended up getting served the whole file
            throw new Error(`HTTP ${res.status} when fetching ${url} bytes ${start}-${end}`);
        }
        const buffer = yield res
            .arrayBuffer()
            .then(arrayBuffer => buffer_1.Buffer.from(arrayBuffer));
        // return the response headers, and the data buffer
        return {
            headers: res.headers.map,
            requestDate,
            responseDate,
            buffer,
        };
    });
}
//# sourceMappingURL=crossFetchBinaryRange.js.map