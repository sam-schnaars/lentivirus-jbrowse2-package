import { Instance, IAnyType } from 'mobx-state-tree';
import { BaseOptions } from '../data_adapters/BaseAdapter';
import PluginManager from '../PluginManager';
import { Region, Feature } from '../util';
import RpcManager from '../rpc/RpcManager';
type AdapterConf = Record<string, unknown>;
type RefNameAliases = Record<string, string>;
export interface RefNameMap {
    forwardMap: RefNameAliases;
    reverseMap: RefNameAliases;
}
export interface BasicRegion {
    start: number;
    end: number;
    refName: string;
    assemblyName: string;
}
/**
 * #stateModel Assembly
 */
export default function assemblyFactory(assemblyConfigType: IAnyType, pluginManager: PluginManager): import("mobx-state-tree").IModelType<{
    /**
     * #property
     */
    configuration: import("mobx-state-tree").IMaybe<import("mobx-state-tree").IReferenceType<IAnyType>>;
}, {
    error: unknown;
    loadingP: Promise<void> | undefined;
    volatileRegions: BasicRegion[] | undefined;
    refNameAliases: RefNameAliases | undefined;
    lowerCaseRefNameAliases: RefNameAliases | undefined;
    cytobands: Feature[] | undefined;
} & {
    /**
     * #method
     */
    getConf(arg: string): any;
} & {
    /**
     * #getter
     */
    readonly initialized: boolean;
    /**
     * #getter
     */
    readonly name: string;
    /**
     * #getter
     */
    readonly regions: BasicRegion[] | undefined;
    /**
     * #getter
     */
    readonly aliases: string[];
    /**
     * #getter
     */
    readonly displayName: string | undefined;
    /**
     * #getter
     */
    hasName(name: string): boolean;
    /**
     * #getter
     */
    readonly allAliases: string[];
    /**
     * #getter
     * note: lowerCaseRefNameAliases not included here: this allows the list
     * of refnames to be just the "normal casing", but things like
     * getCanonicalRefName can resolve a lower-case name if needed
     */
    readonly allRefNames: string[] | undefined;
    /**
     * #getter
     */
    readonly lowerCaseRefNames: string[] | undefined;
    /**
     * #getter
     */
    readonly allRefNamesWithLowerCase: string[] | undefined;
    /**
     * #getter
     */
    readonly rpcManager: RpcManager;
    /**
     * #getter
     */
    readonly refNameColors: string[];
} & {
    /**
     * #getter
     */
    readonly refNames: string[] | undefined;
} & {
    /**
     * #method
     */
    getCanonicalRefName(refName: string): string | undefined;
    /**
     * #method
     */
    getRefNameColor(refName: string): string | undefined;
    /**
     * #method
     */
    isValidRefName(refName: string): boolean;
} & {
    /**
     * #action
     */
    setLoaded({ regions, refNameAliases, lowerCaseRefNameAliases, cytobands, }: {
        regions: Region[];
        refNameAliases: RefNameAliases;
        lowerCaseRefNameAliases: RefNameAliases;
        cytobands: Feature[];
    }): void;
    /**
     * #action
     */
    setError(e: unknown): void;
    /**
     * #action
     */
    setRegions(regions: Region[]): void;
    /**
     * #action
     */
    setRefNameAliases(aliases: RefNameAliases, lowerCaseAliases: RefNameAliases): void;
    /**
     * #action
     */
    setCytobands(cytobands: Feature[]): void;
    /**
     * #action
     */
    setLoadingP(p?: Promise<void>): void;
    /**
     * #action
     */
    load(): Promise<void>;
    /**
     * #action
     */
    loadPre(): Promise<void>;
} & {
    /**
     * #method
     */
    getAdapterMapEntry(adapterConf: AdapterConf, options: BaseOptions): Promise<RefNameMap>;
    /**
     * #method
     * get Map of `canonical-name -> adapter-specific-name`
     */
    getRefNameMapForAdapter(adapterConf: AdapterConf, opts: BaseOptions): Promise<RefNameAliases>;
    /**
     * #method
     * get Map of `adapter-specific-name -> canonical-name`
     */
    getReverseRefNameMapForAdapter(adapterConf: AdapterConf, opts: BaseOptions): Promise<RefNameAliases>;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export type AssemblyModel = ReturnType<typeof assemblyFactory>;
export type Assembly = Instance<AssemblyModel>;
export {};
