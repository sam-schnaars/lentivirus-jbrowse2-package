"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = BaseTooltip;
const react_1 = __importDefault(require("react"));
const mui_1 = require("tss-react/mui");
const material_1 = require("@mui/material");
const react_2 = require("@floating-ui/react");
function round(value) {
    return Math.round(value * 1e5) / 1e5;
}
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    // these styles come from
    // https://github.com/mui-org/material-ui/blob/master/packages/material-ui/src/Tooltip/Tooltip.js
    tooltip: {
        position: 'absolute',
        pointerEvents: 'none',
        backgroundColor: (0, material_1.alpha)(theme.palette.grey[700], 0.9),
        borderRadius: theme.shape.borderRadius,
        color: theme.palette.common.white,
        fontFamily: theme.typography.fontFamily,
        padding: '4px 8px',
        fontSize: theme.typography.pxToRem(12),
        lineHeight: `${round(14 / 10)}em`,
        maxWidth: 300,
        wordWrap: 'break-word',
    },
}));
function BaseTooltip({ clientPoint: clientPointCoords, children, placement = 'right', }) {
    var _a, _b;
    const theme = (0, material_1.useTheme)();
    const popperTheme = (_a = theme.components) === null || _a === void 0 ? void 0 : _a.MuiPopper;
    const { classes } = useStyles();
    const { refs, floatingStyles, context } = (0, react_2.useFloating)({
        placement,
        strategy: 'fixed',
    });
    const clientPoint = (0, react_2.useClientPoint)(context, clientPointCoords);
    const { getFloatingProps } = (0, react_2.useInteractions)([clientPoint]);
    return (react_1.default.createElement(material_1.Portal, { container: (_b = popperTheme === null || popperTheme === void 0 ? void 0 : popperTheme.defaultProps) === null || _b === void 0 ? void 0 : _b.container },
        react_1.default.createElement("div", { className: classes.tooltip, ref: refs.setFloating, style: {
                ...floatingStyles,
                zIndex: 100000,
                // workaround for tooltips flashing at top left corner of screen
                // when first appearing
                visibility: floatingStyles.transform === 'translate(0px, 0px)'
                    ? 'hidden'
                    : undefined,
                pointerEvents: 'none',
            }, ...getFloatingProps() }, children)));
}
