import { AnyConfigurationModel } from '../../configuration';
import PluginManager from '../../PluginManager';
type TrackConf = AnyConfigurationModel | Record<string, unknown>;
/**
 * #stateModel BaseConnectionModel
 */
declare function stateModelFactory(pluginManager: PluginManager): import("mobx-state-tree").IModelType<{
    /**
     * #property
     */
    name: import("mobx-state-tree").ISimpleType<string>;
    /**
     * #property
     */
    tracks: import("mobx-state-tree").IArrayType<import("mobx-state-tree").IAnyModelType>;
    /**
     * #property
     */
    configuration: import("../../configuration/configurationSchema").ConfigurationSchemaType<{
        name: {
            type: string;
            defaultValue: string;
            description: string;
        };
        assemblyNames: {
            type: string;
            defaultValue: never[];
            description: string;
        };
    }, import("../../configuration/configurationSchema").ConfigurationSchemaOptions<undefined, "connectionId">>;
}, {
    /**
     * #action
     */
    connect(_arg: AnyConfigurationModel): void;
} & {
    afterAttach(): void;
    /**
     * #action
     */
    addTrackConf(trackConf: TrackConf): any;
    /**
     * #action
     */
    addTrackConfs(trackConfs: TrackConf[]): void;
    /**
     * #action
     */
    setTrackConfs(trackConfs: AnyConfigurationModel[]): void;
    /**
     * #action
     */
    clear(): void;
}, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
export type BaseConnectionModel = ReturnType<typeof stateModelFactory>;
export default stateModelFactory;
