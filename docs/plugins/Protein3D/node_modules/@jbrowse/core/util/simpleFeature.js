"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isFeature = isFeature;
function isFeature(thing) {
    return (typeof thing === 'object' &&
        thing !== null &&
        typeof thing.get === 'function' &&
        typeof thing.id === 'function');
}
function isSimpleFeatureSerialized(args) {
    return 'uniqueId' in args && typeof args.data !== 'object';
}
/**
 * Simple implementation of a feature object.
 */
class SimpleFeature {
    /**
     * @param args - SimpleFeature args
     *
     * Note: args.data.subfeatures can be an array of these same args,
     * which will be inflated to more instances of this class.
     */
    constructor(args) {
        var _a;
        if (isSimpleFeatureSerialized(args)) {
            this.data = args;
        }
        else {
            this.data = args.data;
            // load handle from args.parent (not args.data.parent) this reason is
            // because if args is an object, it likely isn't properly loaded with
            // parent as a Feature reference (probably a raw parent ID or something
            // instead)
            this.parentHandle = args.parent;
        }
        // the feature id comes from args.id, args.data.uniqueId, or args.uniqueId
        // due to this initialization
        const id = isSimpleFeatureSerialized(args) ? args.uniqueId : args.id;
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
        if (id === undefined || id === null) {
            throw new Error('SimpleFeature requires a unique `id` or `data.uniqueId` attribute');
        }
        this.uniqueId = String(id);
        if (!(this.data.aliases || this.data.end - this.data.start >= 0)) {
            throw new Error(`invalid feature data, end less than start. end: ${this.data.end} start: ${this.data.start}`);
        }
        if (this.data.subfeatures) {
            this.subfeatures = (_a = this.data.subfeatures) === null || _a === void 0 ? void 0 : _a.map((f, i) => typeof f.get !== 'function'
                ? new SimpleFeature({
                    id: f.uniqueId || `${id}-${i}`,
                    data: {
                        strand: this.data.strand,
                        ...f,
                    },
                    parent: this,
                })
                : f);
        }
    }
    /**
     * Get a piece of data about the feature.  All features must have
     * 'start' and 'end', but everything else is optional.
     */
    get(name) {
        return name === 'subfeatures'
            ? this.subfeatures
            : name === 'parent'
                ? this.parent()
                : this.data[name];
    }
    /**
     * Set an item of data.
     */
    set(name, val) {
        this.data[name] = val;
    }
    /**
     * Get an array listing which data keys are present in this feature.
     */
    tags() {
        return Object.keys(this.data);
    }
    /**
     * Get the unique ID of this feature.
     */
    id() {
        return this.uniqueId;
    }
    /**
     * Get this feature's parent feature, or undefined if none.
     */
    parent() {
        return this.parentHandle;
    }
    /**
     * Get an array of child features, or undefined if none.
     */
    children() {
        return this.get('subfeatures');
    }
    toJSON() {
        const d = { ...this.data, uniqueId: this.id() };
        const p = this.parent();
        if (p) {
            d.parentId = p.id();
        }
        const c = this.children();
        if (c) {
            d.subfeatures = c.map(child => child.toJSON());
        }
        return d;
    }
    static fromJSON(json) {
        return new SimpleFeature({ ...json });
    }
}
exports.default = SimpleFeature;
