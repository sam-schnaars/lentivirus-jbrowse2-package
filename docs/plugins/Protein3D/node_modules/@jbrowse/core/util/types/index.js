"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TextSearchManager = exports.RetryError = exports.AuthNeededError = void 0;
exports.isViewContainer = isViewContainer;
exports.isSessionModel = isSessionModel;
exports.isSessionModelWithConfigEditing = isSessionModelWithConfigEditing;
exports.isSessionWithAddTracks = isSessionWithAddTracks;
exports.isSessionWithShareURL = isSessionWithShareURL;
exports.isSessionModelWithWidgets = isSessionModelWithWidgets;
exports.isSessionModelWithConnections = isSessionModelWithConnections;
exports.isSessionModelWithConnectionEditing = isSessionModelWithConnectionEditing;
exports.isSessionWithSessionPlugins = isSessionWithSessionPlugins;
exports.isSelectionContainer = isSelectionContainer;
exports.isViewModel = isViewModel;
exports.isTrackModel = isTrackModel;
exports.isDisplayModel = isDisplayModel;
exports.isTrackViewModel = isTrackViewModel;
exports.isAppRootModel = isAppRootModel;
exports.isRootModelWithInternetAccounts = isRootModelWithInternetAccounts;
exports.isAbstractMenuManager = isAbstractMenuManager;
exports.isUriLocation = isUriLocation;
exports.isLocalPathLocation = isLocalPathLocation;
exports.isBlobLocation = isBlobLocation;
exports.isAuthNeededException = isAuthNeededException;
exports.isRetryException = isRetryException;
const mobx_state_tree_1 = require("mobx-state-tree");
__exportStar(require("./util"), exports);
function isViewContainer(thing) {
    return ((0, mobx_state_tree_1.isStateTreeNode)(thing) &&
        'removeView' in thing &&
        'addView' in thing &&
        'views' in thing);
}
function isSessionModel(thing) {
    return (typeof thing === 'object' &&
        thing !== null &&
        'rpcManager' in thing &&
        'configuration' in thing);
}
function isSessionModelWithConfigEditing(thing) {
    return isSessionModel(thing) && 'editConfiguration' in thing;
}
function isSessionWithAddTracks(thing) {
    return (
    // @ts-expect-error
    isSessionModel(thing) && 'addTrackConf' in thing && !thing.disableAddTracks);
}
function isSessionWithShareURL(thing) {
    return isSessionModel(thing) && 'shareURL' in thing && !!thing.shareURL;
}
function isSessionModelWithWidgets(thing) {
    return isSessionModel(thing) && 'widgets' in thing;
}
function isSessionModelWithConnections(thing) {
    return isSessionModel(thing) && 'makeConnection' in thing;
}
function isSessionModelWithConnectionEditing(thing) {
    return isSessionModel(thing) && 'addConnectionConf' in thing;
}
function isSessionWithSessionPlugins(thing) {
    return isSessionModel(thing) && 'sessionPlugins' in thing;
}
function isSelectionContainer(thing) {
    return (typeof thing === 'object' &&
        thing !== null &&
        'selection' in thing &&
        'setSelection' in thing);
}
function isViewModel(thing) {
    return (typeof thing === 'object' &&
        thing !== null &&
        'width' in thing &&
        'setWidth' in thing);
}
function isTrackModel(thing) {
    return (typeof thing === 'object' &&
        thing !== null &&
        'configuration' in thing &&
        // @ts-expect-error
        thing.configuration.trackId);
}
function isDisplayModel(thing) {
    return (typeof thing === 'object' &&
        thing !== null &&
        'configuration' in thing &&
        // @ts-expect-error
        thing.configuration.displayId);
}
function isTrackViewModel(thing) {
    return (typeof thing === 'object' &&
        thing !== null &&
        'showTrack' in thing &&
        'hideTrack' in thing);
}
function isAppRootModel(thing) {
    return (typeof thing === 'object' &&
        thing !== null &&
        'findAppropriateInternetAccount' in thing);
}
function isRootModelWithInternetAccounts(thing) {
    return (typeof thing === 'object' &&
        thing !== null &&
        'internetAccounts' in thing &&
        'findAppropriateInternetAccount' in thing);
}
function isAbstractMenuManager(thing) {
    return (typeof thing === 'object' &&
        thing !== null &&
        'appendMenu' in thing &&
        'appendToSubMenu' in thing);
}
function isUriLocation(location) {
    return (typeof location === 'object' &&
        location !== null &&
        'uri' in location &&
        !!location.uri);
}
function isLocalPathLocation(location) {
    return (typeof location === 'object' &&
        location !== null &&
        'localPath' in location &&
        !!location.localPath);
}
function isBlobLocation(location) {
    return (typeof location === 'object' &&
        location !== null &&
        'blobId' in location &&
        !!location.blobId);
}
class AuthNeededError extends Error {
    constructor(message, url) {
        super(message);
        this.message = message;
        this.url = url;
        this.name = 'AuthNeededError';
        Object.setPrototypeOf(this, AuthNeededError.prototype);
    }
}
exports.AuthNeededError = AuthNeededError;
class RetryError extends Error {
    constructor(message, internetAccountId) {
        super(message);
        this.message = message;
        this.internetAccountId = internetAccountId;
        this.name = 'RetryError';
    }
}
exports.RetryError = RetryError;
function isAuthNeededException(exception) {
    return (exception instanceof Error &&
        // DOMException
        (exception.name === 'AuthNeededError' ||
            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
            exception.url !== undefined));
}
function isRetryException(exception) {
    return (
    // DOMException
    exception.name === 'RetryError' ||
        // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
        exception.internetAccountId !== undefined);
}
var TextSearchManager_1 = require("../../TextSearch/TextSearchManager");
Object.defineProperty(exports, "TextSearchManager", { enumerable: true, get: function () { return __importDefault(TextSearchManager_1).default; } });
