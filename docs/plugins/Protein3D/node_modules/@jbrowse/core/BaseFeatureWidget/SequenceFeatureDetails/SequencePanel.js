"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const mobx_react_1 = require("mobx-react");
// locals
const util_1 = require("../../util");
const util_2 = require("../util");
// panel types
const CDNASequence_1 = __importDefault(require("./seqtypes/CDNASequence"));
const ProteinSequence_1 = __importDefault(require("./seqtypes/ProteinSequence"));
const GenomicSequence_1 = __importDefault(require("./seqtypes/GenomicSequence"));
const CDSSequence_1 = __importDefault(require("./seqtypes/CDSSequence"));
function getStrand(strand) {
    if (strand === -1) {
        return '(-)';
    }
    else if (strand === 1) {
        return '(+)';
    }
    else {
        return '';
    }
}
function WordWrap({ children }) {
    return (react_1.default.createElement("pre", { style: {
            /* raw styles instead of className so that html copy works */
            fontFamily: 'monospace',
            color: 'black',
            fontSize: 11,
        } }, children));
}
function NoWordWrap({ children }) {
    return (react_1.default.createElement("div", { style: {
            /* raw styles instead of className so that html copy works */
            fontFamily: 'monospace',
            color: 'black',
            fontSize: 11,
            maxWidth: 600,
            whiteSpace: 'wrap',
            wordBreak: 'break-all',
        } }, children));
}
const SequencePanel = (0, mobx_react_1.observer)(react_1.default.forwardRef(function S(props, ref) {
    const { model, feature } = props;
    const { showCoordinates, mode } = model;
    let { sequence: { seq, upstream = '', downstream = '' }, } = props;
    const { subfeatures = [] } = feature;
    const children = subfeatures
        .sort((a, b) => a.start - b.start)
        .map(sub => ({
        ...sub,
        start: sub.start - feature.start,
        end: sub.end - feature.start,
    }));
    // we filter duplicate entries in cds and exon lists duplicate entries
    // may be rare but was seen in Gencode v36 track NCList, likely a bug
    // on GFF3 or probably worth ignoring here (produces broken protein
    // translations if included)
    //
    // position 1:224,800,006..225,203,064 gene ENSG00000185842.15 first
    // transcript ENST00000445597.6
    //
    // http://localhost:3000/?config=test_data%2Fconfig.json&session=share-FUl7G1isvF&password=HXh5Y
    let cds = (0, util_2.dedupe)(children.filter(sub => sub.type === 'CDS'));
    let utr = (0, util_2.dedupe)(children.filter(sub => { var _a; return (_a = sub.type) === null || _a === void 0 ? void 0 : _a.match(/utr/i); }));
    let exons = (0, util_2.dedupe)(children.filter(sub => sub.type === 'exon'));
    if (!utr.length && cds.length && exons.length) {
        utr = (0, util_2.calculateUTRs)(cds, exons);
    }
    if (!utr.length && cds.length && !exons.length) {
        utr = (0, util_2.calculateUTRs2)(cds, {
            start: 0,
            end: feature.end - feature.start,
            type: 'gene',
        });
    }
    if (feature.strand === -1) {
        // doing this in a single assignment is needed because downstream and
        // upstream are swapped so this avoids a temp variable
        ;
        [seq, upstream, downstream] = [
            (0, util_1.revcom)(seq),
            (0, util_1.revcom)(downstream),
            (0, util_1.revcom)(upstream),
        ];
        cds = (0, util_2.revlist)(cds, seq.length);
        exons = (0, util_2.revlist)(exons, seq.length);
        utr = (0, util_2.revlist)(utr, seq.length);
    }
    const codonTable = (0, util_1.generateCodonTable)(util_1.defaultCodonTable);
    const Container = showCoordinates ? WordWrap : NoWordWrap;
    return (react_1.default.createElement("div", { "data-testid": "sequence_panel", ref: ref, style: { maxHeight: 300, overflow: 'auto' } },
        react_1.default.createElement(Container, null,
            react_1.default.createElement("div", { style: { background: 'white' } }, `>${[
                `${feature.name || feature.id}-${mode}`,
                `${feature.refName}:${(0, util_1.toLocale)(feature.start + 1)}-${(0, util_1.toLocale)(feature.end)}${getStrand(feature.strand)}`,
                mode.endsWith('updownstream')
                    ? `+/- ${(0, util_1.toLocale)(model.upDownBp)} up/downstream bp`
                    : '',
            ]
                .filter(f => !!f)
                .join(' ')}\n`),
            mode === 'genomic' ? (react_1.default.createElement(GenomicSequence_1.default, { feature: feature, model: model, sequence: seq })) : mode === 'genomic_sequence_updownstream' ? (react_1.default.createElement(GenomicSequence_1.default, { model: model, feature: feature, sequence: seq, upstream: upstream, downstream: downstream })) : mode === 'cds' ? (react_1.default.createElement(CDSSequence_1.default, { model: model, cds: cds, sequence: seq })) : mode === 'cdna' ? (react_1.default.createElement(CDNASequence_1.default, { model: model, exons: exons, feature: feature, cds: cds, utr: utr, sequence: seq })) : mode === 'protein' ? (react_1.default.createElement(ProteinSequence_1.default, { model: model, cds: cds, codonTable: codonTable, sequence: seq })) : mode === 'gene' ? (react_1.default.createElement(CDNASequence_1.default, { model: model, exons: exons, feature: feature, cds: cds, utr: utr, sequence: seq, includeIntrons: true })) : mode === 'gene_collapsed_intron' ? (react_1.default.createElement(CDNASequence_1.default, { model: model, exons: exons, feature: feature, cds: cds, sequence: seq, utr: utr, includeIntrons: true, collapseIntron: true })) : mode === 'gene_updownstream' ? (react_1.default.createElement(CDNASequence_1.default, { model: model, exons: exons, feature: feature, cds: cds, sequence: seq, utr: utr, upstream: upstream, downstream: downstream, includeIntrons: true })) : mode === 'gene_updownstream_collapsed_intron' ? (react_1.default.createElement(CDNASequence_1.default, { model: model, exons: exons, feature: feature, cds: cds, sequence: seq, utr: utr, upstream: upstream, downstream: downstream, includeIntrons: true, collapseIntron: true })) : (react_1.default.createElement("div", null, "Unknown type")))));
}));
exports.default = SequencePanel;
