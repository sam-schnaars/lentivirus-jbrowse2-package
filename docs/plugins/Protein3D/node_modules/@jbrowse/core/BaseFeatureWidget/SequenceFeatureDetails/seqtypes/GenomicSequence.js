"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const mobx_react_1 = require("mobx-react");
// locals
const util_1 = require("../util");
const SequenceDisplay_1 = __importDefault(require("./SequenceDisplay"));
const GenomicSequence = (0, mobx_react_1.observer)(function ({ sequence, upstream, feature, downstream, model, }) {
    const { charactersPerRow, showCoordinatesSetting, showCoordinates } = model;
    let currStart = 0;
    let upstreamChunk = null;
    let currRemainder = 0;
    const strand = feature.strand === -1 ? -1 : 1;
    const fullGenomicCoordinates = showCoordinatesSetting === 'genomic';
    const mult = fullGenomicCoordinates ? strand : 1;
    let coordStart = fullGenomicCoordinates
        ? strand > 0
            ? feature.start + 1 - ((upstream === null || upstream === void 0 ? void 0 : upstream.length) || 0)
            : feature.end + ((upstream === null || upstream === void 0 ? void 0 : upstream.length) || 0)
        : 0;
    if (upstream) {
        const { segments, remainder } = (0, util_1.splitString)({
            str: upstream,
            charactersPerRow,
            showCoordinates,
        });
        upstreamChunk = (react_1.default.createElement(SequenceDisplay_1.default, { model: model, color: util_1.updownstreamColor, start: currStart, coordStart: coordStart, chunks: segments }));
        currRemainder = remainder;
        currStart = currStart + upstream.length * mult;
        coordStart = coordStart + upstream.length * mult;
    }
    const { segments, remainder } = (0, util_1.splitString)({
        str: sequence,
        charactersPerRow,
        showCoordinates,
        currRemainder,
    });
    const middleChunk = (react_1.default.createElement(SequenceDisplay_1.default, { model: model, color: util_1.genomeColor, start: currStart, coordStart: coordStart, chunks: segments }));
    currRemainder = remainder;
    currStart += sequence.length * mult;
    coordStart = coordStart + sequence.length * mult;
    let downstreamChunk = null;
    if (downstream) {
        const { segments } = (0, util_1.splitString)({
            str: downstream,
            charactersPerRow,
            currRemainder,
            showCoordinates,
        });
        downstreamChunk = (react_1.default.createElement(SequenceDisplay_1.default, { start: currStart, model: model, chunks: segments, coordStart: coordStart, color: util_1.updownstreamColor }));
    }
    return (react_1.default.createElement(react_1.default.Fragment, null,
        upstreamChunk,
        middleChunk,
        downstreamChunk));
});
exports.default = GenomicSequence;
