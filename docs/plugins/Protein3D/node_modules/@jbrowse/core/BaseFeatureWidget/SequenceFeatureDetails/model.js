"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SequenceFeatureDetailsF = SequenceFeatureDetailsF;
const mobx_state_tree_1 = require("mobx-state-tree");
const mobx_1 = require("mobx");
// locals
const util_1 = require("../../util");
function localStorageGetNumber(key, defaultVal) {
    var _a;
    return +((_a = (0, util_1.localStorageGetItem)(key)) !== null && _a !== void 0 ? _a : defaultVal);
}
function SequenceFeatureDetailsF() {
    return mobx_state_tree_1.types
        .model('SequenceFeatureDetails')
        .volatile(() => ({
        showCoordinatesSetting: (0, util_1.localStorageGetItem)('sequenceFeatureDetails-showCoordinatesSetting') ||
            'none',
        intronBp: localStorageGetNumber('sequenceFeatureDetails-intronBp', 10),
        upDownBp: localStorageGetNumber('sequenceFeatureDetails-upDownBp', 100),
        upperCaseCDS: Boolean(JSON.parse((0, util_1.localStorageGetItem)('sequenceFeatureDetails-upperCaseCDS') || 'true')),
        charactersPerRow: 100,
        feature: undefined,
        mode: '',
    }))
        .actions(self => ({
        /**
         * #action
         */
        setFeature(f) {
            self.feature = f;
        },
        /**
         * #action
         */
        setUpDownBp(f) {
            self.upDownBp = f;
        },
        /**
         * #action
         */
        setIntronBp(f) {
            self.intronBp = f;
        },
        /**
         * #action
         */
        setUpperCaseCDS(f) {
            self.upperCaseCDS = f;
        },
        /**
         * #action
         */
        setShowCoordinates(f) {
            self.showCoordinatesSetting = f;
        },
        /**
         * #action
         */
        setMode(mode) {
            self.mode = mode;
        },
    }))
        .views(self => ({
        /**
         * #getter
         */
        get showCoordinates() {
            return self.showCoordinatesSetting !== 'none';
        },
        /**
         * #getter
         */
        get showGenomicCoordsOption() {
            return (self.mode === 'gene' ||
                self.mode === 'gene_updownstream' ||
                self.mode === 'genomic' ||
                self.mode === 'genomic_sequence_updownstream');
        },
        /**
         * #getter
         */
        get hasCDS() {
            var _a, _b;
            return (_b = (_a = self.feature) === null || _a === void 0 ? void 0 : _a.subfeatures) === null || _b === void 0 ? void 0 : _b.some(sub => sub.type === 'CDS');
        },
        /**
         * #getter
         */
        get hasExon() {
            var _a, _b;
            return (_b = (_a = self.feature) === null || _a === void 0 ? void 0 : _a.subfeatures) === null || _b === void 0 ? void 0 : _b.some(sub => sub.type === 'exon');
        },
        /**
         * #getter
         */
        get hasExonOrCDS() {
            return this.hasExon || this.hasCDS;
        },
    }))
        .actions(self => ({
        afterAttach() {
            (0, mobx_state_tree_1.addDisposer)(self, (0, mobx_1.autorun)(() => {
                (0, util_1.localStorageSetItem)('sequenceFeatureDetails-upDownBp', JSON.stringify(self.upDownBp));
                (0, util_1.localStorageSetItem)('sequenceFeatureDetails-intronBp', JSON.stringify(self.intronBp));
                (0, util_1.localStorageSetItem)('sequenceFeatureDetails-upperCaseCDS', JSON.stringify(self.upperCaseCDS));
                (0, util_1.localStorageSetItem)('sequenceFeatureDetails-showCoordinatesSetting', self.showCoordinatesSetting);
            }));
            (0, mobx_state_tree_1.addDisposer)(self, (0, mobx_1.autorun)(() => {
                self.setMode(self.hasCDS ? 'cds' : self.hasExon ? 'cdna' : 'genomic');
            }));
        },
    }));
}
