"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const mobx_react_1 = require("mobx-react");
// locals
const hooks_1 = require("./hooks");
const ui_1 = require("../../ui");
// icons
const SequenceFeatureMenu_1 = __importDefault(require("./dialogs/SequenceFeatureMenu"));
const SequenceTypeSelector_1 = __importDefault(require("./dialogs/SequenceTypeSelector"));
// lazies
const SequencePanel = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./SequencePanel'))));
const SequenceDialog = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./dialogs/SequenceDialog'))));
// set the key on this component to feature.id to clear state after new feature
// is selected
const SequenceFeatureDetails = (0, mobx_react_1.observer)(function ({ model, feature, }) {
    const { sequenceFeatureDetails } = model;
    const { upDownBp } = sequenceFeatureDetails;
    const seqPanelRef = (0, react_1.useRef)(null);
    const [openInDialog, setOpenInDialog] = (0, react_1.useState)(false);
    const [force, setForce] = (0, react_1.useState)(false);
    const { sequence, error } = (0, hooks_1.useFeatureSequence)(model, feature, upDownBp, force);
    (0, react_1.useEffect)(() => {
        sequenceFeatureDetails.setFeature(feature);
    }, [sequenceFeatureDetails, feature]);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement("div", null,
            react_1.default.createElement(SequenceTypeSelector_1.default, { model: sequenceFeatureDetails }),
            react_1.default.createElement(SequenceFeatureMenu_1.default, { ref: seqPanelRef, model: sequenceFeatureDetails, extraItems: [
                    {
                        label: 'Open in dialog',
                        onClick: () => {
                            // this is given a setTimeout because it allows the menu to
                            // close before dialog opens
                            setTimeout(() => {
                                setOpenInDialog(true);
                            }, 1);
                        },
                    },
                ] })),
        openInDialog ? (react_1.default.createElement("div", null,
            "Open in dialog...",
            react_1.default.createElement(react_1.Suspense, { fallback: react_1.default.createElement(ui_1.LoadingEllipses, null) },
                react_1.default.createElement(SequenceDialog, { model: model, feature: feature, handleClose: () => {
                        setOpenInDialog(false);
                    } })))) : (react_1.default.createElement("div", null,
            feature.type === 'gene' ? (react_1.default.createElement(material_1.Typography, null, "Note: inspect subfeature sequences for protein/CDS computations")) : null,
            error ? (react_1.default.createElement(ui_1.ErrorMessage, { error: error })) : !sequence ? (react_1.default.createElement(ui_1.LoadingEllipses, null)) : 'error' in sequence ? (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement(material_1.Typography, { color: "error" }, sequence.error),
                react_1.default.createElement(material_1.Button, { variant: "contained", color: "inherit", onClick: () => {
                        setForce(true);
                    } }, "Force load"))) : (react_1.default.createElement(react_1.Suspense, { fallback: react_1.default.createElement(ui_1.LoadingEllipses, null) },
                react_1.default.createElement(SequencePanel, { ref: seqPanelRef, feature: feature, sequence: sequence, model: sequenceFeatureDetails })))))));
});
exports.default = SequenceFeatureDetails;
