"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeatureDetails = exports.BaseCard = exports.BaseAttributes = exports.BaseCoreDetails = void 0;
const react_1 = __importDefault(require("react"));
const mobx_react_1 = require("mobx-react");
// utils
const ui_1 = require("../../ui");
const util_1 = require("./util");
const util_2 = require("../util");
// locals
const Attributes_1 = __importDefault(require("./Attributes"));
const BaseCard_1 = __importDefault(require("./BaseCard"));
exports.BaseCard = BaseCard_1.default;
const CoreDetails_1 = __importDefault(require("./CoreDetails"));
const FeatureDetails_1 = __importDefault(require("./FeatureDetails"));
exports.FeatureDetails = FeatureDetails_1.default;
const BaseCoreDetails = (props) => {
    const { title = 'Primary data' } = props;
    return (react_1.default.createElement(BaseCard_1.default, { ...props, title: title },
        react_1.default.createElement(CoreDetails_1.default, { ...props })));
};
exports.BaseCoreDetails = BaseCoreDetails;
const BaseAttributes = (props) => {
    const { feature } = props;
    return (react_1.default.createElement(BaseCard_1.default, { ...props, title: "Attributes" },
        react_1.default.createElement(Attributes_1.default, { ...props, attributes: feature })));
};
exports.BaseAttributes = BaseAttributes;
const BaseFeatureDetail = (0, mobx_react_1.observer)(function ({ model }) {
    const { error, featureData } = model;
    if (error) {
        return react_1.default.createElement(ui_1.ErrorMessage, { error: error });
    }
    else if (!featureData) {
        return null;
    }
    else {
        // replacing undefined with null helps with allowing fields to be hidden,
        // setting null is not allowed by jexl so we set it to undefined to hide.
        // see config guide. this replacement happens both here and when
        // snapshotting the featureData
        const featureData2 = (0, util_2.replaceUndefinedWithNull)(featureData);
        return (0, util_1.isEmpty)(featureData2) ? null : (react_1.default.createElement(FeatureDetails_1.default, { model: model, feature: featureData2 }));
    }
});
exports.default = BaseFeatureDetail;
