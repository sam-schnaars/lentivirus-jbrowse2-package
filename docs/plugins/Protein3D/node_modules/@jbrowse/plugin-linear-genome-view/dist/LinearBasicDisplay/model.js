"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const configuration_1 = require("@jbrowse/core/configuration");
const util_1 = require("@jbrowse/core/util");
const mobx_state_tree_1 = require("mobx-state-tree");
// icons
const Visibility_1 = __importDefault(require("@mui/icons-material/Visibility"));
// locals
const BaseLinearDisplay_1 = require("../BaseLinearDisplay");
const serializableFilterChain_1 = __importDefault(require("@jbrowse/core/pluggableElementTypes/renderers/util/serializableFilterChain"));
const SetMaxHeightDialog = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./components/SetMaxHeightDialog'))));
const AddFiltersDialog = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./components/AddFiltersDialog'))));
/**
 * #stateModel LinearBasicDisplay
 * #category display
 * used by `FeatureTrack`, has simple settings like "show/hide feature labels",
 * etc.
 *
 * extends
 * - [BaseLinearDisplay](../baselineardisplay)
 */
function stateModelFactory(configSchema) {
    return mobx_state_tree_1.types
        .compose('LinearBasicDisplay', BaseLinearDisplay_1.BaseLinearDisplay, mobx_state_tree_1.types.model({
        /**
         * #property
         */
        type: mobx_state_tree_1.types.literal('LinearBasicDisplay'),
        /**
         * #property
         */
        trackShowLabels: mobx_state_tree_1.types.maybe(mobx_state_tree_1.types.boolean),
        /**
         * #property
         */
        trackShowDescriptions: mobx_state_tree_1.types.maybe(mobx_state_tree_1.types.boolean),
        /**
         * #property
         */
        trackDisplayMode: mobx_state_tree_1.types.maybe(mobx_state_tree_1.types.string),
        /**
         * #property
         */
        trackMaxHeight: mobx_state_tree_1.types.maybe(mobx_state_tree_1.types.number),
        /**
         * #property
         */
        configuration: (0, configuration_1.ConfigurationReference)(configSchema),
        /**
         * #property
         */
        jexlFilters: mobx_state_tree_1.types.maybe(mobx_state_tree_1.types.array(mobx_state_tree_1.types.string)),
    }))
        .views(self => ({
        /**
         * #getter
         */
        get activeFilters() {
            var _a;
            // config jexlFilters are deferred evaluated so they are prepended with
            // jexl at runtime rather than being stored with jexl in the config
            return ((_a = self.jexlFilters) !== null && _a !== void 0 ? _a : (0, configuration_1.getConf)(self, 'jexlFilters').map((r) => `jexl:${r}`));
        },
        /**
         * #getter
         */
        get rendererTypeName() {
            return (0, configuration_1.getConf)(self, ['renderer', 'type']);
        },
        /**
         * #getter
         */
        get showLabels() {
            var _a;
            return (_a = self.trackShowLabels) !== null && _a !== void 0 ? _a : (0, configuration_1.getConf)(self, ['renderer', 'showLabels']);
        },
        /**
         * #getter
         */
        get showDescriptions() {
            var _a;
            return ((_a = self.trackShowDescriptions) !== null && _a !== void 0 ? _a : (0, configuration_1.getConf)(self, ['renderer', 'showDescriptions']));
        },
        /**
         * #getter
         */
        get maxHeight() {
            var _a;
            return (_a = self.trackMaxHeight) !== null && _a !== void 0 ? _a : (0, configuration_1.getConf)(self, ['renderer', 'maxHeight']);
        },
        /**
         * #getter
         */
        get displayMode() {
            var _a;
            return ((_a = self.trackDisplayMode) !== null && _a !== void 0 ? _a : (0, configuration_1.getConf)(self, ['renderer', 'displayMode']));
        },
    }))
        .views(self => ({
        /**
         * #getter
         */
        get rendererConfig() {
            const configBlob = (0, configuration_1.getConf)(self, ['renderer']) || {};
            const config = configBlob;
            return self.rendererType.configSchema.create({
                ...config,
                showLabels: self.showLabels,
                showDescriptions: self.showDescriptions,
                displayMode: self.displayMode,
                maxHeight: self.maxHeight,
            }, (0, mobx_state_tree_1.getEnv)(self));
        },
    }))
        .actions(self => ({
        /**
         * #action
         */
        setJexlFilters(f) {
            self.jexlFilters = (0, mobx_state_tree_1.cast)(f);
        },
        /**
         * #action
         */
        toggleShowLabels() {
            self.trackShowLabels = !self.showLabels;
        },
        /**
         * #action
         */
        toggleShowDescriptions() {
            self.trackShowDescriptions = !self.showDescriptions;
        },
        /**
         * #action
         */
        setDisplayMode(val) {
            self.trackDisplayMode = val;
        },
        /**
         * #action
         */
        setMaxHeight(val) {
            self.trackMaxHeight = val;
        },
    }))
        .views(self => {
        const { trackMenuItems: superTrackMenuItems, renderProps: superRenderProps, } = self;
        return {
            /**
             * #method
             */
            renderProps() {
                const superProps = superRenderProps();
                return {
                    ...superProps,
                    config: self.rendererConfig,
                    filters: new serializableFilterChain_1.default({
                        filters: self.activeFilters,
                    }),
                };
            },
            /**
             * #method
             */
            trackMenuItems() {
                return [
                    ...superTrackMenuItems(),
                    {
                        label: 'Show labels',
                        icon: Visibility_1.default,
                        type: 'checkbox',
                        checked: self.showLabels,
                        onClick: () => {
                            self.toggleShowLabels();
                        },
                    },
                    {
                        label: 'Show descriptions',
                        icon: Visibility_1.default,
                        type: 'checkbox',
                        checked: self.showDescriptions,
                        onClick: () => {
                            self.toggleShowDescriptions();
                        },
                    },
                    {
                        label: 'Display mode',
                        icon: Visibility_1.default,
                        subMenu: [
                            'compact',
                            'reducedRepresentation',
                            'normal',
                            'collapse',
                        ].map(val => ({
                            label: val,
                            onClick: () => {
                                self.setDisplayMode(val);
                            },
                        })),
                    },
                    {
                        label: 'Set max height',
                        onClick: () => {
                            (0, util_1.getSession)(self).queueDialog(handleClose => [
                                SetMaxHeightDialog,
                                { model: self, handleClose },
                            ]);
                        },
                    },
                    {
                        label: 'Edit filters',
                        onClick: () => {
                            (0, util_1.getSession)(self).queueDialog(handleClose => [
                                AddFiltersDialog,
                                { model: self, handleClose },
                            ]);
                        },
                    },
                ];
            },
        };
    });
}
exports.default = stateModelFactory;
