"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mobx_react_1 = require("mobx-react");
const ui_1 = require("@jbrowse/core/ui");
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const jexlStrings_1 = require("@jbrowse/core/util/jexlStrings");
const useStyles = (0, mui_1.makeStyles)()({
    dialogContent: {
        width: '80em',
    },
    textAreaFont: {
        fontFamily: 'Courier New',
    },
    error: {
        color: 'red',
        fontSize: '0.8em',
    },
});
function checkJexl(code) {
    (0, jexlStrings_1.stringToJexlExpression)(code);
}
const AddFiltersDialog = (0, mobx_react_1.observer)(function ({ model, handleClose, }) {
    const { classes } = useStyles();
    const { activeFilters } = model;
    const [data, setData] = (0, react_1.useState)(activeFilters.join('\n'));
    const [error, setError] = (0, react_1.useState)();
    (0, react_1.useEffect)(() => {
        try {
            data
                .split('\n')
                .map(line => line.trim())
                .filter(line => !!line)
                .map(line => {
                checkJexl(line.trim());
            });
            setError(undefined);
        }
        catch (e) {
            console.error(e);
            setError(e);
        }
    }, [data]);
    return (react_1.default.createElement(ui_1.Dialog, { maxWidth: "xl", open: true, onClose: handleClose, title: "Add track filters" },
        react_1.default.createElement(material_1.DialogContent, null,
            react_1.default.createElement("div", null,
                "Add filters, in jexl format, one per line, starting with the string jexl:. Examples:",
                ' ',
                react_1.default.createElement("ul", null,
                    react_1.default.createElement("li", null,
                        react_1.default.createElement("code", null, "jexl:get(feature,'name')=='BRCA1'"),
                        " - show only feature where the name attribute is BRCA1"),
                    react_1.default.createElement("li", null,
                        react_1.default.createElement("code", null, "jexl:get(feature,'type')=='gene'"),
                        " - show only gene type features in a GFF that has many other feature types"),
                    react_1.default.createElement("li", null,
                        react_1.default.createElement("code", null, "jexl:get(feature,'score') > 400"),
                        " - show only features that have a score greater than 400"))),
            error ? react_1.default.createElement("p", { className: classes.error }, `${error}`) : null,
            react_1.default.createElement(material_1.TextField, { variant: "outlined", multiline: true, minRows: 5, maxRows: 10, className: classes.dialogContent, fullWidth: true, value: data, onChange: event => {
                    setData(event.target.value);
                }, InputProps: {
                    classes: {
                        input: classes.textAreaFont,
                    },
                } })),
        react_1.default.createElement(material_1.DialogActions, null,
            react_1.default.createElement(material_1.Button, { variant: "contained", color: "primary", type: "submit", autoFocus: true, disabled: !!error, onClick: () => {
                    model.setJexlFilters(data.split('\n'));
                    handleClose();
                } }, "Submit"),
            react_1.default.createElement(material_1.Button, { variant: "contained", color: "secondary", onClick: () => {
                    handleClose();
                } }, "Cancel"))));
});
exports.default = AddFiltersDialog;
