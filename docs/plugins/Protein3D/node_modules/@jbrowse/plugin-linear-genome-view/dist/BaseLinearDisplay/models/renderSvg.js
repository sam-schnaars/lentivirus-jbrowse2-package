"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.renderBaseLinearDisplaySvg = renderBaseLinearDisplaySvg;
const react_1 = __importDefault(require("react"));
const util_1 = require("@jbrowse/core/util");
const serverSideRenderedBlock_1 = __importStar(require("./serverSideRenderedBlock"));
const util_2 = require("./util");
async function renderBaseLinearDisplaySvg(self, opts) {
    const { height, id } = self;
    const { overrideHeight } = opts;
    const view = (0, util_1.getContainingView)(self);
    const { offsetPx: viewOffsetPx, roundedDynamicBlocks, width } = view;
    const renderings = await Promise.all(roundedDynamicBlocks.map(async (block) => {
        const blockState = serverSideRenderedBlock_1.default.create({
            key: block.key,
            region: block,
        });
        // regionCannotBeRendered can return jsx so look for plaintext
        // version, or just get the default if none available
        const cannotBeRenderedReason = self.regionCannotBeRenderedText(block) ||
            self.regionCannotBeRendered(block);
        if (cannotBeRenderedReason) {
            return [
                block,
                {
                    reactElement: (react_1.default.createElement(react_1.default.Fragment, null,
                        react_1.default.createElement("rect", { x: 0, y: 0, width: width, height: 20, fill: "#aaa" }),
                        react_1.default.createElement("text", { x: 0, y: 15 }, cannotBeRenderedReason))),
                },
            ];
        }
        const { rpcManager, renderArgs, renderProps, rendererType } = (0, serverSideRenderedBlock_1.renderBlockData)(blockState, self);
        return [
            block,
            await rendererType.renderInClient(rpcManager, {
                ...renderArgs,
                ...renderProps,
                viewParams: (0, util_1.getViewParams)(self, true),
                exportSVG: opts,
                theme: opts.theme || renderProps.theme,
            }),
        ];
    }));
    return (react_1.default.createElement(react_1.default.Fragment, null, renderings.map(([block, rendering], index) => {
        const { offsetPx, widthPx } = block;
        const offset = offsetPx - viewOffsetPx;
        const clipid = (0, util_2.getId)(id, index);
        return (
        /* biome-ignore lint/suspicious/noArrayIndexKey: */
        react_1.default.createElement(react_1.default.Fragment, { key: `frag-${index}` },
            react_1.default.createElement("defs", null,
                react_1.default.createElement("clipPath", { id: clipid },
                    react_1.default.createElement("rect", { x: 0, y: 0, width: widthPx, height: overrideHeight || height }))),
            react_1.default.createElement("g", { transform: `translate(${offset} 0)` },
                react_1.default.createElement("g", { clipPath: `url(#${clipid})` },
                    react_1.default.createElement(util_1.ReactRendering, { rendering: rendering })))));
    })));
}
