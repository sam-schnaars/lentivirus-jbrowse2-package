"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BlockMsg = exports.Tooltip = void 0;
const react_1 = __importStar(require("react"));
const mobx_react_1 = require("mobx-react");
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const configuration_1 = require("@jbrowse/core/configuration");
const ui_1 = require("@jbrowse/core/ui");
// locals
const LinearBlocks_1 = __importDefault(require("./LinearBlocks"));
const useStyles = (0, mui_1.makeStyles)()({
    display: {
        position: 'relative',
        whiteSpace: 'nowrap',
        textAlign: 'left',
        width: '100%',
        minHeight: '100%',
    },
});
const BaseLinearDisplay = (0, mobx_react_1.observer)(function (props) {
    const { classes } = useStyles();
    const theme = (0, material_1.useTheme)();
    const ref = (0, react_1.useRef)(null);
    const [clientRect, setClientRect] = (0, react_1.useState)();
    const [offsetMouseCoord, setOffsetMouseCoord] = (0, react_1.useState)([0, 0]);
    const [clientMouseCoord, setClientMouseCoord] = (0, react_1.useState)([0, 0]);
    const [contextCoord, setContextCoord] = (0, react_1.useState)();
    const { model, children } = props;
    const { TooltipComponent, DisplayMessageComponent, height } = model;
    const items = model.contextMenuItems();
    return (react_1.default.createElement("div", { ref: ref, "data-testid": `display-${(0, configuration_1.getConf)(model, 'displayId')}`, className: classes.display, onContextMenu: event => {
            event.preventDefault();
            if (contextCoord) {
                // There's already a context menu open, so close it
                setContextCoord(undefined);
            }
            else if (ref.current) {
                setContextCoord([event.clientX, event.clientY]);
            }
        }, onMouseMove: event => {
            if (!ref.current) {
                return;
            }
            const rect = ref.current.getBoundingClientRect();
            const { left, top } = rect;
            setOffsetMouseCoord([event.clientX - left, event.clientY - top]);
            setClientMouseCoord([event.clientX, event.clientY]);
            setClientRect(rect);
        } },
        DisplayMessageComponent ? (react_1.default.createElement(DisplayMessageComponent, { model: model })) : (react_1.default.createElement(LinearBlocks_1.default, { ...props })),
        children,
        react_1.default.createElement(react_1.Suspense, { fallback: null },
            react_1.default.createElement(TooltipComponent, { model: model, height: height, offsetMouseCoord: offsetMouseCoord, clientMouseCoord: clientMouseCoord, clientRect: clientRect, mouseCoord: offsetMouseCoord })),
        react_1.default.createElement(ui_1.Menu, { open: Boolean(contextCoord) && items.length > 0, onMenuItemClick: (_, callback) => {
                callback();
                setContextCoord(undefined);
            }, onClose: () => {
                setContextCoord(undefined);
                model.setContextMenuFeature(undefined);
            }, TransitionProps: {
                onExit: () => {
                    setContextCoord(undefined);
                    model.setContextMenuFeature(undefined);
                },
            }, anchorReference: "anchorPosition", anchorPosition: contextCoord
                ? { top: contextCoord[1], left: contextCoord[0] }
                : undefined, style: {
                zIndex: theme.zIndex.tooltip,
            }, menuItems: items })));
});
exports.default = BaseLinearDisplay;
var Tooltip_1 = require("./Tooltip");
Object.defineProperty(exports, "Tooltip", { enumerable: true, get: function () { return __importDefault(Tooltip_1).default; } });
var BlockMsg_1 = require("./BlockMsg");
Object.defineProperty(exports, "BlockMsg", { enumerable: true, get: function () { return __importDefault(BlockMsg_1).default; } });
