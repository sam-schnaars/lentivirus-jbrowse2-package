"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderedBlocks = void 0;
const react_1 = __importDefault(require("react"));
const mui_1 = require("tss-react/mui");
const util_1 = require("@jbrowse/core/util");
const mobx_react_1 = require("mobx-react");
const Block_1 = require("./Block");
const useStyles = (0, mui_1.makeStyles)()({
    linearBlocks: {
        whiteSpace: 'nowrap',
        textAlign: 'left',
        position: 'absolute',
        minHeight: '100%',
        display: 'flex',
    },
    heightOverflowed: {
        position: 'absolute',
        color: 'rgb(77,77,77)',
        borderBottom: '2px solid rgb(77,77,77)',
        textShadow: 'white 0px 0px 1px',
        whiteSpace: 'nowrap',
        width: '100%',
        fontWeight: 'bold',
        textAlign: 'center',
        zIndex: 2000,
        boxSizing: 'border-box',
    },
});
const RenderedBlocks = (0, mobx_react_1.observer)(function ({ model, }) {
    const { classes } = useStyles();
    const { blockDefinitions, blockState } = model;
    return (react_1.default.createElement(react_1.default.Fragment, null, blockDefinitions.map(block => {
        const key = `${model.id}-${block.key}`;
        if (block.type === 'ContentBlock') {
            const state = blockState.get(block.key);
            return (react_1.default.createElement(Block_1.ContentBlock, { block: block, key: key },
                (state === null || state === void 0 ? void 0 : state.ReactComponent) ? (react_1.default.createElement(state.ReactComponent, { model: state })) : null,
                (state === null || state === void 0 ? void 0 : state.maxHeightReached) ? (react_1.default.createElement("div", { className: classes.heightOverflowed, style: {
                        top: state.layout.getTotalHeight() - 16,
                        pointerEvents: 'none',
                        height: 16,
                    } }, "Max height reached")) : null));
        }
        if (block.type === 'ElidedBlock') {
            return react_1.default.createElement(Block_1.ElidedBlock, { key: key, width: block.widthPx });
        }
        if (block.type === 'InterRegionPaddingBlock') {
            return (react_1.default.createElement(Block_1.InterRegionPaddingBlock, { key: key, width: block.widthPx, style: { background: 'none' }, boundary: block.variant === 'boundary' }));
        }
        throw new Error(`invalid block type ${JSON.stringify(block)}`);
    })));
});
exports.RenderedBlocks = RenderedBlocks;
const LinearBlocks = (0, mobx_react_1.observer)(function ({ model, }) {
    const { classes } = useStyles();
    const { blockDefinitions } = model;
    const viewModel = (0, util_1.getContainingView)(model);
    return (react_1.default.createElement("div", { className: classes.linearBlocks, style: {
            left: blockDefinitions.offsetPx - viewModel.offsetPx,
        } },
        react_1.default.createElement(RenderedBlocks, { model: model })));
});
exports.default = LinearBlocks;
