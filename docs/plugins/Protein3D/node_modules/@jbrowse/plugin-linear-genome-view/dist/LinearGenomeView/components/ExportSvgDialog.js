"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = ExportSvgDialog;
const react_1 = __importStar(require("react"));
const material_1 = require("@mui/material");
const ui_1 = require("@jbrowse/core/ui");
const util_1 = require("@jbrowse/core/util");
function LoadingMessage() {
    return (react_1.default.createElement("div", null,
        react_1.default.createElement(material_1.CircularProgress, { size: 20, style: { marginRight: 20 } }),
        react_1.default.createElement(material_1.Typography, { display: "inline" }, "Creating SVG")));
}
function useSvgLocal(key, val) {
    return (0, util_1.useLocalStorage)(`svg-${key}`, val);
}
function TextField2({ children, ...rest }) {
    return (react_1.default.createElement("div", null,
        react_1.default.createElement(material_1.TextField, { ...rest }, children)));
}
function ExportSvgDialog({ model, handleClose, }) {
    const session = (0, util_1.getSession)(model);
    const offscreenCanvas = typeof OffscreenCanvas !== 'undefined';
    const [rasterizeLayers, setRasterizeLayers] = (0, react_1.useState)(offscreenCanvas);
    const [loading, setLoading] = (0, react_1.useState)(false);
    const [error, setError] = (0, react_1.useState)();
    const [filename, setFilename] = useSvgLocal('file', 'jbrowse.svg');
    const [trackLabels, setTrackLabels] = useSvgLocal('tracklabels', 'offset');
    const [themeName, setThemeName] = useSvgLocal('theme', session.themeName || 'default');
    return (react_1.default.createElement(ui_1.Dialog, { open: true, onClose: handleClose, title: "Export SVG" },
        react_1.default.createElement(material_1.DialogContent, null,
            error ? (react_1.default.createElement(ui_1.ErrorMessage, { error: error })) : loading ? (react_1.default.createElement(LoadingMessage, null)) : null,
            react_1.default.createElement(TextField2, { helperText: "filename", value: filename, onChange: event => {
                    setFilename(event.target.value);
                } }),
            react_1.default.createElement(TextField2, { select: true, label: "Track label positioning", variant: "outlined", style: { width: 150 }, value: trackLabels, onChange: event => {
                    setTrackLabels(event.target.value);
                } },
                react_1.default.createElement(material_1.MenuItem, { value: "offset" }, "Offset"),
                react_1.default.createElement(material_1.MenuItem, { value: "overlay" }, "Overlay"),
                react_1.default.createElement(material_1.MenuItem, { value: "left" }, "Left"),
                react_1.default.createElement(material_1.MenuItem, { value: "none" }, "None")),
            session.allThemes ? (react_1.default.createElement(TextField2, { select: true, label: "Theme", variant: "outlined", value: themeName, onChange: event => {
                    setThemeName(event.target.value);
                } }, Object.entries(session.allThemes()).map(([key, val]) => (react_1.default.createElement(material_1.MenuItem, { key: key, value: key }, 
            // @ts-expect-error
            val.name || '(Unknown name)'))))) : null,
            offscreenCanvas ? (react_1.default.createElement(material_1.FormControlLabel, { control: react_1.default.createElement(material_1.Checkbox, { checked: rasterizeLayers, onChange: () => {
                        setRasterizeLayers(val => !val);
                    } }), label: "Rasterize canvas based tracks? File may be much larger if this is turned off" })) : (react_1.default.createElement(material_1.Typography, null, "Note: rasterizing layers not yet supported in this browser, so SVG size may be large"))),
        react_1.default.createElement(material_1.DialogActions, null,
            react_1.default.createElement(material_1.Button, { variant: "contained", color: "secondary", onClick: () => {
                    handleClose();
                } }, "Cancel"),
            react_1.default.createElement(material_1.Button, { variant: "contained", color: "primary", type: "submit", onClick: async () => {
                    setLoading(true);
                    setError(undefined);
                    try {
                        await model.exportSvg({
                            rasterizeLayers,
                            filename,
                            trackLabels,
                            themeName,
                        });
                        handleClose();
                    }
                    catch (e) {
                        console.error(e);
                        setError(e);
                    }
                    finally {
                        setLoading(false);
                    }
                } }, "Submit"))));
}
