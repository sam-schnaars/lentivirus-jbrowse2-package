"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const mobx_react_1 = require("mobx-react");
const util_1 = require("@jbrowse/core/util");
// locals
const util_2 = require("./util");
const consts_1 = require("../consts");
// rounded rect from https://stackoverflow.com/a/45889603/2129219
function rightRoundedRect(x, y, width, height, radius) {
    return `M${x},${y}h${width - radius}a${radius},${radius} 0 0 1 ${radius},${radius}v${height - 2 * radius}a${radius},${radius} 0 0 1 ${-radius},${radius}h${radius - width}z`;
}
function leftRoundedRect(x, y, width, height, radius) {
    return `M${x + radius},${y}h${width - radius}v${height}h${radius - width}a${radius},${radius} 0 0 1 ${-radius},${-radius}v${2 * radius - height}a${radius},${radius} 0 0 1 ${radius},${-radius}z`;
}
function leftTriangle(x, y, width, height) {
    return [
        [x, 0],
        [x + width, height / 2],
        [x, height],
    ].toString();
}
function rightTriangle(x, y, width, height) {
    return [
        [x, height / 2],
        [x + width, 0],
        [x + width, height],
    ].toString();
}
const colorMap = {
    gneg: 'rgb(227,227,227)',
    gpos25: 'rgb(142,142,142)',
    gpos50: 'rgb(85,85,85)',
    gpos100: 'rgb(0,0,0)',
    gpos75: 'rgb(57,57,57)',
    gvar: 'rgb(0,0,0)',
    stalk: 'rgb(127,127,127)',
    acen: '#800',
};
const Cytobands = (0, mobx_react_1.observer)(function ({ overview, block, assembly, }) {
    const { offsetPx, reversed } = block;
    const cytobands = (0, util_2.getCytobands)(assembly, block.refName);
    const lcap = reversed ? cytobands.length - 1 : 0;
    const rcap = reversed ? 0 : cytobands.length - 1;
    const h = consts_1.HEADER_OVERVIEW_HEIGHT;
    let centromereSeen = false;
    return (react_1.default.createElement("g", { transform: `translate(-${offsetPx})` }, cytobands.map((args, index) => {
        const k = JSON.stringify(args);
        const { refName, type, start, end } = args;
        const s = overview.bpToPx({ refName, coord: start }) || 0;
        const e = overview.bpToPx({ refName, coord: end }) || 0;
        const l = Math.min(s, e);
        const w = Math.abs(e - s);
        const c = colorMap[type] || 'black';
        if (type === 'acen' && !centromereSeen) {
            centromereSeen = true; // the next acen entry is drawn with different right triangle
            return (react_1.default.createElement("polygon", { key: k, points: reversed
                    ? rightTriangle(s - w, 0, w, h)
                    : leftTriangle(s, 0, w, h), ...(0, util_1.getFillProps)(c) }));
        }
        if (type === 'acen' && centromereSeen) {
            return (react_1.default.createElement("polygon", { key: k, points: reversed
                    ? leftTriangle(s - w, 0, w, h)
                    : rightTriangle(s, 0, w, h), ...(0, util_1.getFillProps)(c) }));
        }
        if (lcap === index) {
            return (react_1.default.createElement("path", { key: k, d: leftRoundedRect(l, 0, w, h, 8), ...(0, util_1.getFillProps)(c) }));
        }
        if (rcap === index) {
            return (react_1.default.createElement("path", { key: k, d: rightRoundedRect(l, 0, w, h, 8), ...(0, util_1.getFillProps)(c) }));
        }
        return (react_1.default.createElement("rect", { key: k, x: l, y: 0, width: w, height: h, ...(0, util_1.getFillProps)(c) }));
    })));
});
exports.default = Cytobands;
