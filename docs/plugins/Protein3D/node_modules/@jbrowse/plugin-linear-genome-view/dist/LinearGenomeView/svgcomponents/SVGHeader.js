"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SVGHeader;
const react_1 = __importDefault(require("react"));
const util_1 = require("@jbrowse/core/util");
const Base1DViewModel_1 = __importDefault(require("@jbrowse/core/util/Base1DViewModel"));
const material_1 = require("@mui/material");
const Cytobands_1 = __importDefault(require("../components/Cytobands"));
const SVGRuler_1 = __importDefault(require("./SVGRuler"));
const SVGScalebar_1 = __importDefault(require("./SVGScalebar"));
const OverviewScalebarPolygon_1 = __importDefault(require("../components/OverviewScalebarPolygon"));
const consts_1 = require("../consts");
function SVGHeader({ model, fontSize, cytobandHeight, rulerHeight, }) {
    const { width, assemblyNames, showCytobands, displayedRegions } = model;
    const { assemblyManager } = (0, util_1.getSession)(model);
    const assemblyName = assemblyNames.length > 1 ? '' : assemblyNames[0];
    const assembly = assemblyManager.get(assemblyName);
    const theme = (0, material_1.useTheme)();
    const c = (0, util_1.stripAlpha)(theme.palette.text.primary);
    const overview = Base1DViewModel_1.default.create({
        displayedRegions: JSON.parse(JSON.stringify(displayedRegions)),
        interRegionPaddingWidth: 0,
        minimumBlockWidth: model.minimumBlockWidth,
    });
    const visibleRegions = model.dynamicBlocks.contentBlocks;
    if (!visibleRegions.length) {
        return null;
    }
    overview.setVolatileWidth(width);
    overview.showAllRegions();
    const block = overview.dynamicBlocks.contentBlocks[0];
    const first = visibleRegions.at(0);
    const last = visibleRegions.at(-1);
    const firstOverviewPx = overview.bpToPx({
        ...first,
        coord: first.reversed ? first.end : first.start,
    }) || 0;
    const lastOverviewPx = overview.bpToPx({
        ...last,
        coord: last.reversed ? last.start : last.end,
    }) || 0;
    const y = +showCytobands * cytobandHeight;
    return (react_1.default.createElement("g", { id: "header" },
        react_1.default.createElement("text", { x: 0, y: 0, dominantBaseline: "hanging", fontSize: fontSize, fill: c }, assemblyName),
        showCytobands ? (react_1.default.createElement("g", { transform: `translate(0 ${rulerHeight})` },
            react_1.default.createElement(Cytobands_1.default, { overview: overview, assembly: assembly, block: block }),
            react_1.default.createElement("rect", { stroke: "red", fill: "rgb(255,0,0)", fillOpacity: 0.1, width: Math.max(lastOverviewPx - firstOverviewPx, 0.5), height: consts_1.HEADER_OVERVIEW_HEIGHT - 1, x: firstOverviewPx, y: 0.5 }),
            react_1.default.createElement("g", { transform: `translate(0,${consts_1.HEADER_OVERVIEW_HEIGHT})` },
                react_1.default.createElement(OverviewScalebarPolygon_1.default, { overview: overview, model: model, useOffset: false })))) : null,
        react_1.default.createElement("g", { transform: `translate(0 ${fontSize + y})` },
            react_1.default.createElement(SVGScalebar_1.default, { model: model, fontSize: fontSize })),
        react_1.default.createElement("g", { transform: `translate(0 ${rulerHeight + y})` },
            react_1.default.createElement(SVGRuler_1.default, { model: model, fontSize: fontSize }))));
}
