"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mobx_react_1 = require("mobx-react");
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const ZoomIn_1 = __importDefault(require("@mui/icons-material/ZoomIn"));
const ZoomOut_1 = __importDefault(require("@mui/icons-material/ZoomOut"));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    container: {
        display: 'flex',
        flexDirection: 'row',
        alignItems: 'center',
    },
    slider: {
        width: 70,
        color: theme.palette.text.secondary,
    },
}));
const ZoomControls = (0, mobx_react_1.observer)(function ({ model, }) {
    const { classes } = useStyles();
    const { maxBpPerPx, minBpPerPx, bpPerPx } = model;
    const [value, setValue] = (0, react_1.useState)(-Math.log2(bpPerPx) * 100);
    (0, react_1.useEffect)(() => {
        setValue(-Math.log2(bpPerPx) * 100);
    }, [bpPerPx]);
    return (react_1.default.createElement("div", { className: classes.container },
        react_1.default.createElement(material_1.IconButton, { "data-testid": "zoom_out", onClick: () => {
                model.zoom(bpPerPx * 2);
            }, disabled: bpPerPx >= maxBpPerPx - 0.0001, size: "large" },
            react_1.default.createElement(ZoomOut_1.default, null)),
        react_1.default.createElement(material_1.Slider, { size: "small", className: classes.slider, value: value, min: -Math.log2(maxBpPerPx) * 100, max: -Math.log2(minBpPerPx) * 100, onChange: (_, val) => {
                setValue(val);
            }, onChangeCommitted: () => model.zoomTo(2 ** (-value / 100)) }),
        react_1.default.createElement(material_1.IconButton, { "data-testid": "zoom_in", onClick: () => {
                model.zoom(model.bpPerPx / 2);
            }, disabled: bpPerPx <= minBpPerPx + 0.0001, size: "large" },
            react_1.default.createElement(ZoomIn_1.default, null))));
});
exports.default = ZoomControls;
