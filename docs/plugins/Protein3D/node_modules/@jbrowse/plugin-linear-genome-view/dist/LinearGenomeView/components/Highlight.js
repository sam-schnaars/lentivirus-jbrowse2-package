"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mobx_react_1 = require("mobx-react");
const mui_1 = require("tss-react/mui");
const colord_1 = require("@jbrowse/core/util/colord");
const util_1 = require("@jbrowse/core/util");
const ui_1 = require("@jbrowse/core/ui");
const material_1 = require("@mui/material");
// icons
const Link_1 = __importDefault(require("@mui/icons-material/Link"));
const Close_1 = __importDefault(require("@mui/icons-material/Close"));
const Bookmark_1 = __importDefault(require("@mui/icons-material/Bookmark"));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    highlight: {
        height: '100%',
        position: 'absolute',
        overflow: 'hidden',
        background: (0, colord_1.colord)(theme.palette.highlight.main).alpha(0.35).toRgbString(),
    },
    linkIcon: {
        color: (0, colord_1.colord)(theme.palette.highlight.main).darken(0.2).toRgbString(),
    },
}));
const Highlight = (0, mobx_react_1.observer)(function Highlight({ model, highlight, }) {
    var _a;
    const { classes } = useStyles();
    const [open, setOpen] = (0, react_1.useState)(false);
    const anchorEl = (0, react_1.useRef)(null);
    const session = (0, util_1.getSession)(model);
    const { assemblyManager } = session;
    const dismissHighlight = () => {
        model.removeHighlight(highlight);
    };
    function handleClose() {
        setOpen(false);
    }
    // coords
    const mapCoords = (r) => {
        const s = model.bpToPx({
            refName: r.refName,
            coord: r.start,
        });
        const e = model.bpToPx({
            refName: r.refName,
            coord: r.end,
        });
        return s && e
            ? {
                width: Math.max(Math.abs(e.offsetPx - s.offsetPx), 3),
                left: Math.min(s.offsetPx, e.offsetPx) - model.offsetPx,
            }
            : undefined;
    };
    const asm = assemblyManager.get(highlight.assemblyName);
    const h = mapCoords({
        ...highlight,
        refName: (_a = asm === null || asm === void 0 ? void 0 : asm.getCanonicalRefName(highlight.refName)) !== null && _a !== void 0 ? _a : highlight.refName,
    });
    return h ? (react_1.default.createElement("div", { className: classes.highlight, style: {
            left: h.left,
            width: h.width,
        } },
        react_1.default.createElement(material_1.Tooltip, { title: "Highlighted from URL parameter", arrow: true },
            react_1.default.createElement(material_1.IconButton, { ref: anchorEl, onClick: () => {
                    setOpen(true);
                }, style: { zIndex: 3 } },
                react_1.default.createElement(Link_1.default, { fontSize: "small", className: classes.linkIcon }))),
        react_1.default.createElement(ui_1.Menu, { anchorEl: anchorEl.current, onMenuItemClick: (_event, callback) => {
                callback(session);
                handleClose();
            }, open: open, onClose: handleClose, menuItems: [
                {
                    label: 'Dismiss highlight',
                    icon: Close_1.default,
                    onClick: () => {
                        dismissHighlight();
                    },
                },
                {
                    label: 'Bookmark highlighted region',
                    icon: Bookmark_1.default,
                    onClick: () => {
                        let bookmarkWidget = session.widgets.get('GridBookmark');
                        if (!bookmarkWidget) {
                            bookmarkWidget = session.addWidget('GridBookmarkWidget', 'GridBookmark');
                        }
                        // @ts-expect-error
                        bookmarkWidget.addBookmark(highlight);
                        dismissHighlight();
                    },
                },
            ] }))) : null;
});
const HighlightGroup = (0, mobx_react_1.observer)(function HighlightGroup({ model, }) {
    return model.highlight.map((highlight, idx) => (react_1.default.createElement(Highlight, { key: `${JSON.stringify(highlight)}-${idx}`, model: model, highlight: highlight })));
});
exports.default = HighlightGroup;
