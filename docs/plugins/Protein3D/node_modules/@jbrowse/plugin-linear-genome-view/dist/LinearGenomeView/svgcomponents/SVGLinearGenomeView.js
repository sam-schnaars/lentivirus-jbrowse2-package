"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SVGTracks = exports.SVGRuler = void 0;
exports.renderToSvg = renderToSvg;
/* eslint-disable react-refresh/only-export-components */
const react_1 = __importDefault(require("react"));
const mobx_1 = require("mobx");
const util_1 = require("@jbrowse/core/util");
const material_1 = require("@mui/material");
const ui_1 = require("@jbrowse/core/ui");
const tracks_1 = require("@jbrowse/core/util/tracks");
const mobx_state_tree_1 = require("mobx-state-tree");
const SVGBackground_1 = __importDefault(require("./SVGBackground"));
const SVGTracks_1 = __importDefault(require("./SVGTracks"));
const SVGHeader_1 = __importDefault(require("./SVGHeader"));
const util_2 = require("./util");
// render LGV to SVG
async function renderToSvg(model, opts) {
    await (0, mobx_1.when)(() => model.initialized);
    const { textHeight = 18, headerHeight = 40, rulerHeight = 50, fontSize = 13, cytobandHeight = 100, trackLabels = 'offset', themeName = 'default', Wrapper = ({ children }) => children, } = opts;
    const session = (0, util_1.getSession)(model);
    const { allThemes } = session;
    const { createRootFn } = (0, mobx_state_tree_1.getRoot)(model);
    const theme = allThemes === null || allThemes === void 0 ? void 0 : allThemes()[themeName];
    const { width, tracks, showCytobands } = model;
    const shift = 50;
    const c = +showCytobands * cytobandHeight;
    const offset = headerHeight + rulerHeight + c + 10;
    const height = (0, util_2.totalHeight)(tracks, textHeight, trackLabels) + offset + 100;
    const displayResults = await Promise.all(tracks.map(async (track) => {
        const display = track.displays[0];
        await (0, mobx_1.when)(() => !display.renderProps().notReady);
        return { track, result: await display.renderSvg({ ...opts, theme }) };
    }));
    const trackLabelMaxLen = (0, util_1.max)(tracks.map(t => (0, util_1.measureText)((0, tracks_1.getTrackName)(t.configuration, session), fontSize)), 0) + 40;
    const trackLabelOffset = trackLabels === 'left' ? trackLabelMaxLen : 0;
    const w = width + trackLabelOffset;
    // the xlink namespace is used for rendering <image> tag
    return (0, util_1.renderToStaticMarkup)(react_1.default.createElement(material_1.ThemeProvider, { theme: (0, ui_1.createJBrowseTheme)(theme) },
        react_1.default.createElement(Wrapper, null,
            react_1.default.createElement("svg", { width: w, height: height, xmlns: "http://www.w3.org/2000/svg", xmlnsXlink: "http://www.w3.org/1999/xlink", viewBox: [0, 0, w + shift * 2, height].toString() },
                react_1.default.createElement(SVGBackground_1.default, { width: w, height: height, shift: shift }),
                react_1.default.createElement("g", { transform: `translate(${shift} 0)` },
                    react_1.default.createElement("g", { transform: `translate(${trackLabelOffset})` },
                        react_1.default.createElement(SVGHeader_1.default, { model: model, fontSize: fontSize, rulerHeight: rulerHeight, cytobandHeight: cytobandHeight })),
                    react_1.default.createElement("g", { transform: `translate(0 ${offset})` },
                        react_1.default.createElement(SVGTracks_1.default, { textHeight: textHeight, fontSize: fontSize, model: model, displayResults: displayResults, trackLabels: trackLabels, trackLabelOffset: trackLabelOffset })))))), createRootFn);
}
var SVGRuler_1 = require("./SVGRuler");
Object.defineProperty(exports, "SVGRuler", { enumerable: true, get: function () { return __importDefault(SVGRuler_1).default; } });
var SVGTracks_2 = require("./SVGTracks");
Object.defineProperty(exports, "SVGTracks", { enumerable: true, get: function () { return __importDefault(SVGTracks_2).default; } });
