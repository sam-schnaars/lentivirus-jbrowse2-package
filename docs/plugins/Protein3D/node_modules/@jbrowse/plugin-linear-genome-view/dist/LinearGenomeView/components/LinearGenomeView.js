"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mui_1 = require("tss-react/mui");
const ui_1 = require("@jbrowse/core/ui");
const util_1 = require("@jbrowse/core/util");
const mobx_react_1 = require("mobx-react");
const TrackContainer_1 = __importDefault(require("./TrackContainer"));
const TracksContainer_1 = __importDefault(require("./TracksContainer"));
const ImportForm = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./ImportForm'))));
const NoTracksActiveButton = (0, react_1.lazy)(() => Promise.resolve().then(() => __importStar(require('./NoTracksActiveButton'))));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    note: {
        textAlign: 'center',
        paddingTop: theme.spacing(1),
        paddingBottom: theme.spacing(1),
    },
    rel: {
        position: 'relative',
    },
    top: {
        zIndex: 1000,
    },
}));
const LinearGenomeView = (0, mobx_react_1.observer)(function ({ model, }) {
    const { tracks, error, initialized, hasDisplayedRegions } = model;
    const ref = (0, react_1.useRef)(null);
    const session = (0, util_1.getSession)(model);
    const { classes } = useStyles();
    (0, react_1.useEffect)(() => {
        // sets the focused view id based on a click within the LGV;
        // necessary for subviews to be focused properly
        function handleSelectView(e) {
            var _a, _b;
            if (e.target instanceof Element && ((_a = ref.current) === null || _a === void 0 ? void 0 : _a.contains(e.target))) {
                (_b = session.setFocusedViewId) === null || _b === void 0 ? void 0 : _b.call(session, model.id);
            }
        }
        document.addEventListener('mousedown', handleSelectView);
        document.addEventListener('keydown', handleSelectView);
        return () => {
            document.removeEventListener('mousedown', handleSelectView);
            document.removeEventListener('keydown', handleSelectView);
        };
    }, [session, model]);
    if (!initialized && !error) {
        return react_1.default.createElement(ui_1.LoadingEllipses, { variant: "h6" });
    }
    if (!hasDisplayedRegions || error) {
        return react_1.default.createElement(ImportForm, { model: model });
    }
    const MiniControlsComponent = model.MiniControlsComponent();
    const HeaderComponent = model.HeaderComponent();
    return (react_1.default.createElement("div", { className: classes.rel, ref: ref, onMouseLeave: () => {
            session.setHovered(undefined);
        }, onMouseMove: event => {
            const c = ref.current;
            if (!c) {
                return;
            }
            const { tracks } = model;
            const leftPx = event.clientX - c.getBoundingClientRect().left;
            const hoverPosition = model.pxToBp(leftPx);
            const hoverFeature = tracks.find(t => t.displays[0].featureUnderMouse);
            session.setHovered({ hoverPosition, hoverFeature });
        } },
        react_1.default.createElement(HeaderComponent, { model: model }),
        react_1.default.createElement(MiniControlsComponent, { model: model }),
        react_1.default.createElement(TracksContainer_1.default, { model: model }, !tracks.length ? (react_1.default.createElement(react_1.Suspense, { fallback: react_1.default.createElement(react_1.default.Fragment, null) },
            react_1.default.createElement(NoTracksActiveButton, { model: model }))) : (tracks.map(track => (react_1.default.createElement(TrackContainer_1.default, { key: track.id, model: model, track: track })))))));
});
exports.default = LinearGenomeView;
