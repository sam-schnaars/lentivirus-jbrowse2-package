"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const mobx_react_1 = require("mobx-react");
const util_1 = require("@jbrowse/core/util");
const util_2 = require("../util");
const consts_1 = require("../consts");
const useStyles = (0, mui_1.makeStyles)()({
    scalebarLabel: {
        height: consts_1.HEADER_OVERVIEW_HEIGHT,
        position: 'absolute',
        display: 'flex',
        justifyContent: 'center',
        pointerEvents: 'none',
    },
});
const OverviewScalebarTickLabels = (0, mobx_react_1.observer)(function ({ block, scale, overview, model, }) {
    const { classes } = useStyles();
    const { start, end, reversed, refName, assemblyName } = block;
    const { majorPitch } = (0, util_2.chooseGridPitch)(scale, 120, 15);
    const { assemblyManager } = (0, util_1.getSession)(model);
    const assembly = assemblyManager.get(assemblyName);
    const refNameColor = assembly === null || assembly === void 0 ? void 0 : assembly.getRefNameColor(refName);
    const tickLabels = [];
    for (let i = 0; i < Math.floor((end - start) / majorPitch); i++) {
        const offsetLabel = (i + 1) * majorPitch;
        tickLabels.push(reversed ? end - offsetLabel : start + offsetLabel);
    }
    return tickLabels.map((tickLabel, labelIdx) => (react_1.default.createElement(material_1.Typography, { key: `${JSON.stringify(block)}-${tickLabel}-${labelIdx}`, className: classes.scalebarLabel, variant: "body2", style: {
            left: ((labelIdx + 1) * majorPitch) / scale,
            pointerEvents: 'none',
            color: refNameColor,
        } }, (0, util_1.getTickDisplayStr)(tickLabel, overview.bpPerPx))));
});
exports.default = OverviewScalebarTickLabels;
