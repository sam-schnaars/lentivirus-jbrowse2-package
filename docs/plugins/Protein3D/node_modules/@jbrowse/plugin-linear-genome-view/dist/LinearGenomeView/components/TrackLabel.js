"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const mobx_react_1 = require("mobx-react");
const configuration_1 = require("@jbrowse/core/configuration");
const util_1 = require("@jbrowse/core/util");
const tracks_1 = require("@jbrowse/core/util/tracks");
const ui_1 = require("@jbrowse/core/ui");
const CascadingMenuButton_1 = __importDefault(require("@jbrowse/core/ui/CascadingMenuButton"));
// icons
const MoreVert_1 = __importDefault(require("@mui/icons-material/MoreVert"));
const Close_1 = __importDefault(require("@mui/icons-material/Close"));
const Minimize_1 = __importDefault(require("@mui/icons-material/Minimize"));
const Add_1 = __importDefault(require("@mui/icons-material/Add"));
const KeyboardDoubleArrowDown_1 = __importDefault(require("@mui/icons-material/KeyboardDoubleArrowDown"));
const KeyboardDoubleArrowUp_1 = __importDefault(require("@mui/icons-material/KeyboardDoubleArrowUp"));
const KeyboardArrowDown_1 = __importDefault(require("@mui/icons-material/KeyboardArrowDown"));
const KeyboardArrowUp_1 = __importDefault(require("@mui/icons-material/KeyboardArrowUp"));
const TrackLabelDragHandle_1 = __importDefault(require("./TrackLabelDragHandle"));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    root: {
        background: (0, material_1.alpha)(theme.palette.background.paper, 0.8),
        '&:hover': {
            background: theme.palette.background.paper,
        },
    },
    trackName: {
        fontSize: '0.8rem',
    },
    iconButton: {
        padding: theme.spacing(1),
    },
}));
const TrackLabel = (0, mobx_react_1.observer)(react_1.default.forwardRef(function TrackLabel2({ track, className }, ref) {
    var _a;
    const { classes, cx } = useStyles();
    const view = (0, util_1.getContainingView)(track);
    const session = (0, util_1.getSession)(track);
    const trackConf = track.configuration;
    const minimized = track.minimized;
    const trackId = (0, configuration_1.getConf)(track, 'trackId');
    const trackName = (0, tracks_1.getTrackName)(trackConf, session);
    const items = [
        {
            label: 'Track order',
            type: 'subMenu',
            priority: 2000,
            subMenu: [
                {
                    label: minimized ? 'Restore track' : 'Minimize track',
                    icon: minimized ? Add_1.default : Minimize_1.default,
                    onClick: () => {
                        track.setMinimized(!minimized);
                    },
                },
                ...(view.tracks.length > 2
                    ? [
                        {
                            label: 'Move track to top',
                            icon: KeyboardDoubleArrowUp_1.default,
                            onClick: () => {
                                view.moveTrackToTop(track.id);
                            },
                        },
                    ]
                    : []),
                {
                    label: 'Move track up',
                    icon: KeyboardArrowUp_1.default,
                    onClick: () => {
                        view.moveTrackUp(track.id);
                    },
                },
                {
                    label: 'Move track down',
                    icon: KeyboardArrowDown_1.default,
                    onClick: () => {
                        view.moveTrackDown(track.id);
                    },
                },
                ...(view.tracks.length > 2
                    ? [
                        {
                            label: 'Move track to bottom',
                            icon: KeyboardDoubleArrowDown_1.default,
                            onClick: () => {
                                view.moveTrackToBottom(track.id);
                            },
                        },
                    ]
                    : []),
            ],
        },
        ...(((_a = session.getTrackActionMenuItems) === null || _a === void 0 ? void 0 : _a.call(session, trackConf)) || []),
        ...track.trackMenuItems(),
    ].sort((a, b) => ((b === null || b === void 0 ? void 0 : b.priority) || 0) - ((a === null || a === void 0 ? void 0 : a.priority) || 0));
    return (react_1.default.createElement(material_1.Paper, { ref: ref, className: cx(className, classes.root) },
        react_1.default.createElement(TrackLabelDragHandle_1.default, { track: track, trackId: trackId, view: view }),
        react_1.default.createElement(material_1.IconButton, { onClick: () => view.hideTrack(trackId), className: classes.iconButton, title: "close this track" },
            react_1.default.createElement(Close_1.default, { fontSize: "small" })),
        react_1.default.createElement(material_1.Typography, { variant: "body1", component: "span", className: classes.trackName, onMouseDown: event => {
                // avoid becoming a click-and-drag action on the lgv
                event.stopPropagation();
            } },
            react_1.default.createElement(ui_1.SanitizedHTML, { html: [trackName, minimized ? '(minimized)' : '']
                    .filter(f => !!f)
                    .join(' ') })),
        react_1.default.createElement(CascadingMenuButton_1.default, { menuItems: items, "data-testid": "track_menu_icon" },
            react_1.default.createElement(MoreVert_1.default, { fontSize: "small" }))));
}));
exports.default = TrackLabel;
