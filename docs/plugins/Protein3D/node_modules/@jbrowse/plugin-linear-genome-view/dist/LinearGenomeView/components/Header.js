"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const mobx_react_1 = require("mobx-react");
const material_1 = require("@mui/material");
const mui_1 = require("tss-react/mui");
const util_1 = require("@jbrowse/core/util");
// icons
const Icons_1 = require("@jbrowse/core/ui/Icons");
const ArrowForward_1 = __importDefault(require("@mui/icons-material/ArrowForward"));
const ArrowBack_1 = __importDefault(require("@mui/icons-material/ArrowBack"));
const OverviewScalebar_1 = __importDefault(require("./OverviewScalebar"));
const ZoomControls_1 = __importDefault(require("./ZoomControls"));
const SearchBox_1 = __importDefault(require("./SearchBox"));
const consts_1 = require("../consts");
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    headerBar: {
        display: 'flex',
    },
    headerForm: {
        flexWrap: 'nowrap',
        marginRight: 7,
    },
    spacer: {
        flexGrow: 1,
    },
    panButton: {
        background: (0, material_1.alpha)(theme.palette.background.paper, 0.8),
        color: theme.palette.text.primary,
        margin: consts_1.SPACING,
    },
    bp: {
        display: 'flex',
        alignItems: 'center',
        marginLeft: 5,
    },
    toggleButton: {
        height: 44,
        border: 'none',
        marginLeft: theme.spacing(4),
    },
    buttonSpacer: {
        marginRight: theme.spacing(2),
    },
}));
const HeaderButtons = (0, mobx_react_1.observer)(({ model }) => {
    const { classes } = useStyles();
    return (react_1.default.createElement(material_1.IconButton, { onClick: model.activateTrackSelector, className: classes.toggleButton, title: "Open track selector", value: "track_select" },
        react_1.default.createElement(Icons_1.TrackSelector, { className: classes.buttonSpacer })));
});
function PanControls({ model }) {
    const { classes } = useStyles();
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(material_1.Button, { variant: "outlined", className: classes.panButton, onClick: () => {
                model.slide(-0.9);
            } },
            react_1.default.createElement(ArrowBack_1.default, null)),
        react_1.default.createElement(material_1.Button, { variant: "outlined", className: classes.panButton, onClick: () => {
                model.slide(0.9);
            } },
            react_1.default.createElement(ArrowForward_1.default, null))));
}
const RegionWidth = (0, mobx_react_1.observer)(function ({ model }) {
    const { classes } = useStyles();
    const { coarseTotalBp } = model;
    return (react_1.default.createElement(material_1.Typography, { variant: "body2", color: "textSecondary", className: classes.bp }, (0, util_1.getBpDisplayStr)(coarseTotalBp)));
});
const Controls = ({ model }) => {
    const { classes } = useStyles();
    return (react_1.default.createElement("div", { className: classes.headerBar },
        react_1.default.createElement(HeaderButtons, { model: model }),
        react_1.default.createElement("div", { className: classes.spacer }),
        react_1.default.createElement(material_1.FormGroup, { row: true, className: classes.headerForm },
            react_1.default.createElement(PanControls, { model: model }),
            react_1.default.createElement(SearchBox_1.default, { model: model })),
        react_1.default.createElement(RegionWidth, { model: model }),
        react_1.default.createElement(ZoomControls_1.default, { model: model }),
        react_1.default.createElement("div", { className: classes.spacer })));
};
const LinearGenomeViewHeader = (0, mobx_react_1.observer)(function ({ model }) {
    const { hideHeader, hideHeaderOverview } = model;
    return !hideHeader ? (hideHeaderOverview ? (react_1.default.createElement(Controls, { model: model })) : (react_1.default.createElement(OverviewScalebar_1.default, { model: model },
        react_1.default.createElement(Controls, { model: model })))) : null;
});
exports.default = LinearGenomeViewHeader;
