"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mui_1 = require("tss-react/mui");
const mobx_react_1 = require("mobx-react");
const util_1 = require("@jbrowse/core/util");
const material_1 = require("@mui/material");
const ui_1 = require("@jbrowse/core/ui");
// icons
const Close_1 = __importDefault(require("@mui/icons-material/Close"));
const searchUtils_1 = require("../../searchUtils");
const ImportFormRefNameAutocomplete_1 = __importDefault(require("./ImportFormRefNameAutocomplete"));
const useStyles = (0, mui_1.makeStyles)()(theme => ({
    importFormContainer: {
        padding: theme.spacing(2),
    },
    button: {
        margin: theme.spacing(2),
    },
    container: {
        padding: theme.spacing(4),
    },
}));
const LinearGenomeViewImportForm = (0, mobx_react_1.observer)(function ({ model, }) {
    var _a;
    const { classes } = useStyles();
    const session = (0, util_1.getSession)(model);
    const { assemblyNames, assemblyManager } = session;
    const { error } = model;
    const [selectedAsm, setSelectedAsm] = (0, react_1.useState)(assemblyNames[0]);
    const [option, setOption] = (0, react_1.useState)();
    const assembly = assemblyManager.get(selectedAsm);
    const assemblyError = assemblyNames.length
        ? assembly === null || assembly === void 0 ? void 0 : assembly.error
        : 'No configured assemblies';
    const displayError = assemblyError || error;
    const [value, setValue] = (0, react_1.useState)('');
    const regions = assembly === null || assembly === void 0 ? void 0 : assembly.regions;
    const assemblyLoaded = !!regions;
    const r0 = regions ? ((_a = regions[0]) === null || _a === void 0 ? void 0 : _a.refName) || '' : '';
    // useEffect resets to an "initial state" of displaying first region from
    // assembly after assembly change. needs to react to selectedAsm as well as
    // r0 because changing assembly will run setValue('') and then r0 may not
    // change if assembly names are the same across assemblies, but it still
    // needs to be reset
    /* biome-ignore lint/correctness/useExhaustiveDependencies: */
    (0, react_1.useEffect)(() => {
        setValue(r0);
    }, [r0, selectedAsm]);
    // implementation notes:
    // having this wrapped in a form allows intuitive use of enter key to submit
    return (react_1.default.createElement("div", { className: classes.container },
        displayError ? react_1.default.createElement(ui_1.ErrorMessage, { error: displayError }) : null,
        react_1.default.createElement(material_1.Container, { className: classes.importFormContainer },
            react_1.default.createElement("form", { onSubmit: async (event) => {
                    var _a;
                    event.preventDefault();
                    model.setError(undefined);
                    if (value) {
                        // has it's own error handling
                        try {
                            if ((option === null || option === void 0 ? void 0 : option.getDisplayString()) === value &&
                                option.hasLocation()) {
                                await (0, searchUtils_1.navToOption)({
                                    option,
                                    model,
                                    assemblyName: selectedAsm,
                                });
                            }
                            else if ((_a = option === null || option === void 0 ? void 0 : option.results) === null || _a === void 0 ? void 0 : _a.length) {
                                model.setSearchResults(option.results, option.getLabel(), selectedAsm);
                            }
                            else if (assembly) {
                                await (0, searchUtils_1.handleSelectedRegion)({ input: value, assembly, model });
                            }
                        }
                        catch (e) {
                            console.error(e);
                            session.notify(`${e}`, 'warning');
                        }
                    }
                } },
                react_1.default.createElement(material_1.Grid, { container: true, spacing: 1, justifyContent: "center", alignItems: "center" },
                    react_1.default.createElement(material_1.Grid, { item: true },
                        react_1.default.createElement(material_1.FormControl, null,
                            react_1.default.createElement(ui_1.AssemblySelector, { onChange: val => {
                                    setSelectedAsm(val);
                                }, localStorageKey: "lgv", session: session, selected: selectedAsm }))),
                    react_1.default.createElement(material_1.Grid, { item: true }, selectedAsm ? (assemblyError ? (react_1.default.createElement(Close_1.default, { style: { color: 'red' } })) : assemblyLoaded ? (react_1.default.createElement(material_1.FormControl, null,
                        react_1.default.createElement(ImportFormRefNameAutocomplete_1.default, { value: value, setValue: setValue, selectedAsm: selectedAsm, setOption: setOption, model: model }))) : (react_1.default.createElement(material_1.CircularProgress, { size: 20, disableShrink: true }))) : null),
                    react_1.default.createElement(material_1.Grid, { item: true },
                        react_1.default.createElement(material_1.FormControl, null,
                            react_1.default.createElement(material_1.Button, { type: "submit", disabled: !value, className: classes.button, variant: "contained", color: "primary" }, "Open")),
                        react_1.default.createElement(material_1.FormControl, null,
                            react_1.default.createElement(material_1.Button, { disabled: !value, className: classes.button, onClick: () => {
                                    model.setError(undefined);
                                    model.showAllRegionsInAssembly(selectedAsm);
                                }, variant: "contained", color: "secondary" }, "Show all regions in assembly"))))))));
});
exports.default = LinearGenomeViewImportForm;
