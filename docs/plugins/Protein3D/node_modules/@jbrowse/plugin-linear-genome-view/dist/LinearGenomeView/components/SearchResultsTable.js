"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SearchResultsTable;
const react_1 = __importDefault(require("react"));
const material_1 = require("@mui/material");
const mobx_state_tree_1 = require("mobx-state-tree");
const util_1 = require("@jbrowse/core/util");
function SearchResultsTable({ searchResults, assemblyName: optAssemblyName, model, handleClose, }) {
    const session = (0, util_1.getSession)(model);
    const { pluginManager } = (0, util_1.getEnv)(session);
    const { assemblyManager } = session;
    const assemblyName = optAssemblyName || model.displayedRegions[0].assemblyName;
    const assembly = assemblyManager.get(assemblyName);
    if (!assembly) {
        throw new Error(`assembly ${assemblyName} not found`);
    }
    if (!assembly.regions) {
        throw new Error(`assembly ${assemblyName} regions not loaded`);
    }
    function getTrackName(trackId) {
        var _a;
        if (trackId) {
            const schema = pluginManager.pluggableConfigSchemaType('track');
            const configuration = (0, mobx_state_tree_1.resolveIdentifier)(schema, (0, mobx_state_tree_1.getRoot)(model), trackId);
            return ((_a = configuration === null || configuration === void 0 ? void 0 : configuration.name) === null || _a === void 0 ? void 0 : _a.value) || '';
        }
        return '';
    }
    async function handleClick(location) {
        var _a;
        try {
            const newRegion = (_a = assembly === null || assembly === void 0 ? void 0 : assembly.regions) === null || _a === void 0 ? void 0 : _a.find(region => location === region.refName);
            if (newRegion) {
                model.setDisplayedRegions([newRegion]);
                // we use showAllRegions after setDisplayedRegions to make the entire
                // region visible, xref #1703
                model.showAllRegions();
            }
            else {
                await model.navToLocString(location, assemblyName);
            }
        }
        catch (e) {
            console.warn(e);
            session.notify(`${e}`, 'warning');
        }
    }
    return (react_1.default.createElement(material_1.TableContainer, { component: material_1.Paper },
        react_1.default.createElement(material_1.Table, null,
            react_1.default.createElement(material_1.TableHead, null,
                react_1.default.createElement(material_1.TableRow, null,
                    react_1.default.createElement(material_1.TableCell, null, "Name"),
                    react_1.default.createElement(material_1.TableCell, { align: "right" }, "Location"),
                    react_1.default.createElement(material_1.TableCell, { align: "right" }, "Track"),
                    react_1.default.createElement(material_1.TableCell, { align: "right" }))),
            react_1.default.createElement(material_1.TableBody, null, searchResults.map(result => (react_1.default.createElement(material_1.TableRow, { key: result.getId() },
                react_1.default.createElement(material_1.TableCell, { component: "th", scope: "row" }, result.getLabel()),
                react_1.default.createElement(material_1.TableCell, { align: "right" }, result.getLocation()),
                react_1.default.createElement(material_1.TableCell, { align: "right" }, getTrackName(result.getTrackId()) || 'N/A'),
                react_1.default.createElement(material_1.TableCell, { align: "right" },
                    react_1.default.createElement(material_1.Button, { onClick: async () => {
                            try {
                                await handleClick(
                                // label is used if it is a refName, it has no location
                                result.getLocation() || result.getLabel());
                                const resultTrackId = result.getTrackId();
                                if (resultTrackId) {
                                    model.showTrack(resultTrackId);
                                }
                            }
                            catch (e) {
                                console.error(e);
                                session.notifyError(`${e}`, e);
                            }
                            handleClose();
                        }, color: "primary", variant: "contained" }, "Go")))))))));
}
