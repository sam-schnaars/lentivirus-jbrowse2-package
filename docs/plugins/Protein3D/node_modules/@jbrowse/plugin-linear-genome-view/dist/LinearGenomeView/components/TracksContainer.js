"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const mui_1 = require("tss-react/mui");
const mobx_react_1 = require("mobx-react");
const ui_1 = require("@jbrowse/core/ui");
const util_1 = require("@jbrowse/core/util");
// local components
const Rubberband_1 = __importDefault(require("./Rubberband"));
const Scalebar_1 = __importDefault(require("./Scalebar"));
const Gridlines_1 = __importDefault(require("./Gridlines"));
const CenterLine_1 = __importDefault(require("./CenterLine"));
const VerticalGuide_1 = __importDefault(require("./VerticalGuide"));
const RubberbandSpan_1 = __importDefault(require("./RubberbandSpan"));
const Highlight_1 = __importDefault(require("./Highlight"));
const consts_1 = require("../consts");
// hooks
const useSideScroll_1 = require("./useSideScroll");
const useWheelScroll_1 = require("./useWheelScroll");
const useRangeSelect_1 = require("./useRangeSelect");
const useStyles = (0, mui_1.makeStyles)()({
    tracksContainer: {
        position: 'relative',
        overflow: 'hidden',
    },
});
const TracksContainer = (0, mobx_react_1.observer)(function TracksContainer({ children, model, }) {
    const { classes } = useStyles();
    const { pluginManager } = (0, util_1.getEnv)(model);
    const { mouseDown: mouseDown1, mouseUp } = (0, useSideScroll_1.useSideScroll)(model);
    const { showGridlines, showCenterLine } = model;
    const ref = (0, react_1.useRef)(null);
    const { guideX, rubberbandOn, leftBpOffset, rightBpOffset, numOfBpSelected, width, left, anchorPosition, open, handleMenuItemClick, handleClose, mouseMove, mouseDown: mouseDown2, } = (0, useRangeSelect_1.useRangeSelect)(ref, model, true);
    (0, useWheelScroll_1.useWheelScroll)(ref, model);
    const additional = pluginManager.evaluateExtensionPoint('LinearGenomeView-TracksContainerComponent', undefined, { model });
    return (react_1.default.createElement("div", { ref: ref, "data-testid": "trackContainer", className: classes.tracksContainer, onMouseDown: event => {
            mouseDown1(event);
            mouseDown2(event);
        }, onMouseMove: mouseMove, onMouseUp: mouseUp },
        showGridlines ? react_1.default.createElement(Gridlines_1.default, { model: model }) : null,
        showCenterLine ? react_1.default.createElement(CenterLine_1.default, { model: model }) : null,
        guideX !== undefined ? (react_1.default.createElement(VerticalGuide_1.default, { model: model, coordX: guideX })) : rubberbandOn ? (react_1.default.createElement(RubberbandSpan_1.default, { leftBpOffset: leftBpOffset, rightBpOffset: rightBpOffset, numOfBpSelected: numOfBpSelected, width: width, left: left })) : null,
        anchorPosition ? (react_1.default.createElement(ui_1.Menu, { anchorReference: "anchorPosition", anchorPosition: {
                left: anchorPosition.clientX,
                top: anchorPosition.clientY,
            }, onMenuItemClick: handleMenuItemClick, open: open, onClose: handleClose, menuItems: model.rubberBandMenuItems() })) : null,
        react_1.default.createElement(Rubberband_1.default, { model: model, ControlComponent: react_1.default.createElement(Scalebar_1.default, { model: model, style: {
                    height: consts_1.SCALE_BAR_HEIGHT,
                    boxSizing: 'border-box',
                } }) }),
        react_1.default.createElement(Highlight_1.default, { model: model }),
        additional,
        children));
});
exports.default = TracksContainer;
