import React from 'react';
import { makeStyles } from 'tss-react/mui';
import { getContainingView } from '@jbrowse/core/util';
import { observer } from 'mobx-react';
import { ContentBlock as ContentBlockComponent, ElidedBlock as ElidedBlockComponent, InterRegionPaddingBlock as InterRegionPaddingBlockComponent, } from './Block';
const useStyles = makeStyles()({
    linearBlocks: {
        whiteSpace: 'nowrap',
        textAlign: 'left',
        position: 'absolute',
        minHeight: '100%',
        display: 'flex',
    },
    heightOverflowed: {
        position: 'absolute',
        color: 'rgb(77,77,77)',
        borderBottom: '2px solid rgb(77,77,77)',
        textShadow: 'white 0px 0px 1px',
        whiteSpace: 'nowrap',
        width: '100%',
        fontWeight: 'bold',
        textAlign: 'center',
        zIndex: 2000,
        boxSizing: 'border-box',
    },
});
const RenderedBlocks = observer(function ({ model, }) {
    const { classes } = useStyles();
    const { blockDefinitions, blockState } = model;
    return (React.createElement(React.Fragment, null, blockDefinitions.map(block => {
        const key = `${model.id}-${block.key}`;
        if (block.type === 'ContentBlock') {
            const state = blockState.get(block.key);
            return (React.createElement(ContentBlockComponent, { block: block, key: key },
                (state === null || state === void 0 ? void 0 : state.ReactComponent) ? (React.createElement(state.ReactComponent, { model: state })) : null,
                (state === null || state === void 0 ? void 0 : state.maxHeightReached) ? (React.createElement("div", { className: classes.heightOverflowed, style: {
                        top: state.layout.getTotalHeight() - 16,
                        pointerEvents: 'none',
                        height: 16,
                    } }, "Max height reached")) : null));
        }
        if (block.type === 'ElidedBlock') {
            return React.createElement(ElidedBlockComponent, { key: key, width: block.widthPx });
        }
        if (block.type === 'InterRegionPaddingBlock') {
            return (React.createElement(InterRegionPaddingBlockComponent, { key: key, width: block.widthPx, style: { background: 'none' }, boundary: block.variant === 'boundary' }));
        }
        throw new Error(`invalid block type ${JSON.stringify(block)}`);
    })));
});
export { RenderedBlocks };
const LinearBlocks = observer(function ({ model, }) {
    const { classes } = useStyles();
    const { blockDefinitions } = model;
    const viewModel = getContainingView(model);
    return (React.createElement("div", { className: classes.linearBlocks, style: {
            left: blockDefinitions.offsetPx - viewModel.offsetPx,
        } },
        React.createElement(RenderedBlocks, { model: model })));
});
export default LinearBlocks;
