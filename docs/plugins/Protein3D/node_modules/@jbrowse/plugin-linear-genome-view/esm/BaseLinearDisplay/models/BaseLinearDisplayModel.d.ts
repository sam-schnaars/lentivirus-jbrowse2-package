import React from 'react';
import { ThemeOptions } from '@mui/material';
import { MenuItem } from '@jbrowse/core/ui';
import { Feature, AnyReactComponentType } from '@jbrowse/core/util';
import { BaseBlock } from '@jbrowse/core/util/blockTypes';
import CompositeMap from '@jbrowse/core/util/compositeMap';
import { Instance } from 'mobx-state-tree';
import { ExportSvgOptions } from '../../LinearGenomeView';
export interface Layout {
    minX: number;
    minY: number;
    maxX: number;
    maxY: number;
    name: string;
}
type LayoutRecord = [number, number, number, number];
export interface ExportSvgDisplayOptions extends ExportSvgOptions {
    overrideHeight: number;
    theme: ThemeOptions;
}
export declare const BaseLinearDisplay: import("mobx-state-tree").IModelType<{
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    type: import("mobx-state-tree").ISimpleType<string>;
    rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
} & {
    heightPreConfig: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<number>>;
} & {
    userBpPerPxLimit: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<number>>;
    userByteSizeLimit: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<number>>;
} & {
    /**
     * #property
     * updated via autorun
     */
    blockState: import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
        key: import("mobx-state-tree").ISimpleType<string>;
        region: import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
        reloadFlag: import("mobx-state-tree").IType<number | undefined, number, number>;
        isLeftEndOfDisplayedRegion: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isRightEndOfDisplayedRegion: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    }, {
        renderInProgress: AbortController | undefined;
        filled: boolean;
        reactElement: React.ReactElement | undefined;
        features: Map<string, Feature> | undefined;
        layout: any;
        status: string;
        error: unknown;
        message: string | undefined;
        maxHeightReached: boolean;
        ReactComponent: ({ model, }: {
            model: {
                error?: unknown;
                reload: () => void;
                message: React.ReactNode;
                filled?: boolean;
                status?: string;
                reactElement?: React.
                /**
                 * #stateModel BaseLinearDisplay
                 * #category display
                 *
                 * BaseLinearDisplay is used as the basis for many linear genome view tracks.
                 * It is block based, and can use 'static blocks' or 'dynamic blocks'
                 *
                 * extends
                 * - [BaseDisplay](../basedisplay)
                 * - [TrackHeightMixin](../trackheightmixin)
                 * - [FeatureDensityMixin](../featuredensitymixin)
                 */
                ReactElement;
            };
        }) => React.JSX.Element | undefined;
        renderProps: any;
    } & {
        doReload(): void;
        afterAttach(): void;
        setStatus(message: string): void;
        setLoading(abortController: AbortController): void;
        setMessage(messageText: string): void;
        setRendered(props: {
            reactElement: React.ReactElement /**
             * #getter
             * returns a string feature ID if the globally-selected object
             * is probably a feature
             */;
            features: Map<string, Feature>;
            layout: any;
            maxHeightReached: boolean;
            renderProps: any;
        } | undefined): void;
        setError(error: unknown): void;
        reload(): void;
        beforeDestroy(): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    /**
     * #property
     */
    configuration: import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
        maxFeatureScreenDensity: {
            type: string;
            description: string;
            defaultValue: number;
        };
        fetchSizeLimit: {
            type: string;
            defaultValue: number;
            description: string;
        };
        height: {
            type: string;
            defaultValue: number;
            description: string;
        };
        mouseover: {
            type: string;
            description: string;
            defaultValue: string;
            contextVariable: string[];
        };
        jexlFilters: {
            type: string;
            description: string;
            defaultValue: never[];
        };
    }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, "displayId">>;
}, {
    rendererTypeName: string;
    error: unknown;
    message: string | undefined;
} & {
    readonly RenderingComponent: React.FC<{
        model: {
            id: string;
            type: string;
            rpcDriverName: string | undefined;
        } & import("mobx-state-tree/dist/internal").NonEmptyObject & {
            rendererTypeName: string;
            error: unknown;
            message: string | undefined;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }, {
            rendererTypeName: string;
            error: unknown;
            message: string | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
        onHorizontalScroll?: () => void;
        blockState?: Record<string, any>;
    }>;
    readonly DisplayBlurb: React.FC<{
        model: {
            id: string;
            type: string;
            rpcDriverName: string | undefined;
        } & import("mobx-state-tree/dist/internal" /**
         * #property
         * updated via autorun
         */).NonEmptyObject & {
            rendererTypeName: string;
            error: unknown;
            message: string | undefined;
        } & import("mobx-state-tree").IStateTreeNode<import("mobx-state-tree").IModelType<{
            id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
            type: import("mobx-state-tree").ISimpleType<string>;
            rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
        }, {
            rendererTypeName: string;
            error: unknown;
            message: string | undefined;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    }> | null;
    readonly adapterConfig: any;
    readonly parentTrack: any;
    renderProps(): any;
    readonly rendererType: import("@jbrowse/core/pluggableElementTypes").RendererType;
    readonly DisplayMessageComponent: undefined | React.FC<any>;
    trackMenuItems(): MenuItem[];
    readonly viewMenuActions: MenuItem[];
    regionCannotBeRendered(): null;
} & {
    setMessage(arg?: string): void;
    setError(error?: unknown): void;
    setRpcDriverName(rpcDriverName: string): void;
    reload(): void;
} & {
    scrollTop: number;
} & {
    readonly height: number;
} & {
    setScrollTop(scrollTop: number): void;
    setHeight(displayHeight: number): number;
    resizeHeight(distance: number): number;
} & {
    featureDensityStatsP: undefined | Promise<import("@jbrowse/core/data_adapters/BaseAdapter").FeatureDensityStats>;
    featureDensityStats: undefined | import("@jbrowse/core/data_adapters/BaseAdapter").FeatureDensityStats;
    currStatsBpPerPx: number;
} & {
    readonly currentBytesRequested: number;
    readonly currentFeatureScreenDensity: number;
    readonly maxFeatureScreenDensity: any;
    readonly featureDensityStatsReady: boolean;
    readonly maxAllowableBytes: number;
} & {
    afterAttach(): void;
} & {
    setCurrStatsBpPerPx(n: number): void;
    setFeatureDensityStatsLimit(stats?: import("@jbrowse/core/data_adapters/BaseAdapter").FeatureDensityStats): void;
    getFeatureDensityStats(): Promise<import("@jbrowse/core/data_adapters/BaseAdapter").FeatureDensityStats>;
    setFeatureDensityStatsP(arg: any): void;
    setFeatureDensityStats(featureDensityStats?: import("@jbrowse/core/data_adapters/BaseAdapter").FeatureDensityStats): void;
    clearFeatureDensityStats(): void;
} & {
    readonly regionTooLarge: boolean;
    readonly regionTooLargeReason: string;
} & {
    regionCannotBeRenderedText(_region: import("@jbrowse/core/util").Region): "" | "Force load to see features";
    regionCannotBeRendered(_region: import("@jbrowse/core/util").Region): React.JSX.Element | null;
} & {
    featureIdUnderMouse: undefined | string;
    contextMenuFeature: undefined | Feature;
} & {
    /**
     * #getter
     * if a display-level message should be displayed instead of the blocks,
     * make this return a react component
     */
    readonly DisplayMessageComponent: React.FC<any> | undefined;
    /**
     * #getter
     */
    readonly blockType: "dynamicBlocks" | "staticBlocks";
    /**
     * #getter
     */
    readonly blockDefinitions: import("@jbrowse/core/util/blockTypes").BlockSet;
} & {
    /**
     * #getter
     * how many milliseconds to wait for the display to
     * "settle" before re-rendering a block
     */
    readonly renderDelay: number;
    /**
     * #getter
     */
    readonly TooltipComponent: AnyReactComponentType;
    /**
     * #getter
     * returns a string feature ID if the globally-selected object
     * is probably a feature
     */
    readonly selectedFeatureId: string | undefined;
} & {
    /**
     * #getter
     * a CompositeMap of `featureId -> feature obj` that
     * just looks in all the block data for that feature
     */
    readonly features: CompositeMap<string, Feature>;
    /**
     * #getter
     */
    readonly featureUnderMouse: Feature | undefined;
    /**
     * #getter
     */
    getFeatureOverlapping(blockKey: string, x: number, y: number): string | undefined;
    /**
     * #getter
     */
    getFeatureByID(blockKey: string, id: string): LayoutRecord | undefined;
    /**
     * #getter
     */
    searchFeatureByID(id: string): LayoutRecord | undefined;
} & {
    /**
     * #action
     */
    addBlock(key: string, block: BaseBlock): void;
    /**
     * #action
     */
    deleteBlock(key: string): void;
    /**
     * #action
     */
    selectFeature(feature: Feature): void;
    /**
     * #action
     */
    navToFeature(feature: Feature): void;
    /**
     * #action
     */
    clearFeatureSelection(): void;
    /**
     * #action
     */
    setFeatureIdUnderMouse(feature?: string): void;
    /**
     * #action
     */
    setContextMenuFeature(feature?: Feature): void;
} & {
    /**
     * #action
     */
    reload(): Promise<void>;
} & {
    /**
     * #method
     */
    trackMenuItems(): MenuItem[];
    /**
     * #method
     */
    contextMenuItems(): MenuItem[];
    /**
     * #method
     */
    renderProps(): any;
} & {
    /**
     * #method
     */
    renderSvg(opts: ExportSvgDisplayOptions): Promise<React.JSX.Element>;
    afterAttach(): void;
}, import("mobx-state-tree").ModelCreationType<import("mobx-state-tree/dist/internal").ExtractCFromProps<{
    id: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<string>, [undefined]>;
    type: import("mobx-state-tree").ISimpleType<string>;
    rpcDriverName: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<string>>;
} & {
    heightPreConfig: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<number>>;
} & {
    userBpPerPxLimit: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<number>>;
    userByteSizeLimit: import("mobx-state-tree").IMaybe<import("mobx-state-tree").ISimpleType<number>>;
} & {
    /**
     * #property
     * updated via autorun
     */
    blockState: import("mobx-state-tree").IMapType<import("mobx-state-tree").IModelType<{
        key: import("mobx-state-tree").ISimpleType<string>;
        region: import("mobx-state-tree").IModelType<{
            refName: import("mobx-state-tree").ISimpleType<string>;
            start: import("mobx-state-tree").ISimpleType<number>;
            end: import("mobx-state-tree").ISimpleType<number>;
            reversed: import("mobx-state-tree").IOptionalIType<import("mobx-state-tree").ISimpleType<boolean>, [undefined]>;
        } & {
            assemblyName: import("mobx-state-tree").ISimpleType<string>;
        }, {
            setRefName(newRefName: string): void;
        }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>;
        reloadFlag: import("mobx-state-tree").IType<number | undefined, number, number>;
        isLeftEndOfDisplayedRegion: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
        isRightEndOfDisplayedRegion: import("mobx-state-tree").IType<boolean | undefined, boolean, boolean>;
    }, {
        renderInProgress: AbortController | undefined;
        filled: boolean;
        reactElement: React.ReactElement | undefined;
        features: Map<string, Feature> | undefined;
        layout: any;
        status: string;
        error: unknown;
        message: string | undefined;
        maxHeightReached: boolean;
        ReactComponent: ({ model, }: {
            model: {
                error?: unknown;
                reload: () => void;
                message: React.ReactNode;
                filled?: boolean;
                status?: string;
                reactElement?: React.
                /**
                 * #stateModel BaseLinearDisplay
                 * #category display
                 *
                 * BaseLinearDisplay is used as the basis for many linear genome view tracks.
                 * It is block based, and can use 'static blocks' or 'dynamic blocks'
                 *
                 * extends
                 * - [BaseDisplay](../basedisplay)
                 * - [TrackHeightMixin](../trackheightmixin)
                 * - [FeatureDensityMixin](../featuredensitymixin)
                 */
                ReactElement;
            };
        }) => React.JSX.Element | undefined;
        renderProps: any;
    } & {
        doReload(): void;
        afterAttach(): void;
        setStatus(message: string): void;
        setLoading(abortController: AbortController): void;
        setMessage(messageText: string): void;
        setRendered(props: {
            reactElement: React.ReactElement /**
             * #getter
             * returns a string feature ID if the globally-selected object
             * is probably a feature
             */;
            features: Map<string, Feature>;
            layout: any;
            maxHeightReached: boolean;
            renderProps: any;
        } | undefined): void;
        setError(error: unknown): void;
        reload(): void;
        beforeDestroy(): void;
    }, import("mobx-state-tree")._NotCustomized, import("mobx-state-tree")._NotCustomized>>;
    /**
     * #property
     */
    configuration: import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaType<{
        maxFeatureScreenDensity: {
            type: string;
            description: string;
            defaultValue: number;
        };
        fetchSizeLimit: {
            type: string;
            defaultValue: number;
            description: string;
        };
        height: {
            type: string;
            defaultValue: number;
            description: string;
        };
        mouseover: {
            type: string;
            description: string;
            defaultValue: string;
            contextVariable: string[];
        };
        jexlFilters: {
            type: string;
            description: string;
            defaultValue: never[];
        };
    }, import("@jbrowse/core/configuration/configurationSchema").ConfigurationSchemaOptions<undefined, "displayId">>;
}>>, {
    type: string;
    id: string;
    configuration: import("mobx-state-tree").ModelSnapshotType<Record<string, any>>;
    heightPreConfig: number | undefined;
    rpcDriverName: string | undefined;
    userBpPerPxLimit: number | undefined;
    userByteSizeLimit: number | undefined;
}>;
export type BaseLinearDisplayStateModel = typeof BaseLinearDisplay;
export type BaseLinearDisplayModel = Instance<BaseLinearDisplayStateModel>;
export {};
