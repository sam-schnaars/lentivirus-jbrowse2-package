import React from 'react';
import { Typography } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { observer } from 'mobx-react';
const useStyles = makeStyles()(theme => ({
    refLabel: {
        fontSize: 11,
        position: 'absolute',
        left: 2,
        top: -1,
        fontWeight: 'bold',
        lineHeight: 'normal',
        zIndex: 1,
        background: theme.palette.background.paper,
    },
    b0: {
        left: 0,
        zIndex: 100,
    },
}));
const ScalebarRefNameLabels = observer(function ({ model }) {
    const { classes, cx } = useStyles();
    const { staticBlocks, offsetPx, scaleBarDisplayPrefix } = model;
    // find the block that needs pinning to the left side for context
    let lastLeftBlock = 0;
    staticBlocks.forEach((block, i) => {
        if (block.offsetPx - offsetPx < 0) {
            lastLeftBlock = i;
        }
    });
    const val = scaleBarDisplayPrefix();
    const b0 = staticBlocks.blocks[0];
    return (React.createElement(React.Fragment, null,
        (b0 === null || b0 === void 0 ? void 0 : b0.type) !== 'ContentBlock' && val ? (React.createElement(Typography, { className: cx(classes.b0, classes.refLabel) }, val)) : null,
        staticBlocks.map((block, index) => {
            const { offsetPx: blockOffsetPx, isLeftEndOfDisplayedRegion, key, type, refName, } = block;
            const last = index === lastLeftBlock;
            return type === 'ContentBlock' &&
                (isLeftEndOfDisplayedRegion || last) ? (React.createElement(Typography, { key: `refLabel-${key}-${index}`, style: {
                    left: last
                        ? Math.max(0, -offsetPx)
                        : blockOffsetPx - offsetPx - 1,
                    paddingLeft: last ? 0 : 1,
                }, className: classes.refLabel, "data-testid": `refLabel-${refName}` },
                last && val ? `${val}:` : '',
                refName)) : null;
        })));
});
export default ScalebarRefNameLabels;
