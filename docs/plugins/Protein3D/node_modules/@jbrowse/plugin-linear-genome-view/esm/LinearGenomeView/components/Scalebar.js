import { Paper } from '@mui/material';
import { makeStyles } from 'tss-react/mui';
import { observer } from 'mobx-react';
import React from 'react';
import ScalebarCoordinateLabels from './ScalebarCoordinateLabels';
import ScalebarRefNameLabels from './ScalebarRefNameLabels';
const useStyles = makeStyles()({
    container: {
        overflow: 'hidden',
        position: 'relative',
    },
    zoomContainer: {
        position: 'relative',
        zIndex: 1,
    },
    scalebar: {
        position: 'absolute',
        display: 'flex',
        pointerEvents: 'none',
    },
});
const Scalebar = observer(React.forwardRef(function Scalebar2({ model, style, className, ...other }, ref) {
    const { classes, cx } = useStyles();
    const { staticBlocks, offsetPx, scaleFactor } = model;
    const offsetLeft = staticBlocks.offsetPx - offsetPx;
    return (React.createElement(Paper, { "data-resizer": "true" // used to avoid click-and-drag scrolls on trackscontainer
        , className: cx(classes.container, className), variant: "outlined", ref: ref, style: style, ...other },
        React.createElement("div", { className: classes.zoomContainer, style: {
                transform: scaleFactor !== 1 ? `scaleX(${scaleFactor})` : undefined,
            } },
            React.createElement("div", { className: classes.scalebar, style: {
                    left: offsetLeft - 1,
                    width: staticBlocks.totalWidthPx,
                    ...style,
                } },
                React.createElement(ScalebarCoordinateLabels, { model: model }))),
        React.createElement(ScalebarRefNameLabels, { model: model })));
}));
export default Scalebar;
