{"version":3,"file":"index.js","names":["_propTypes","_interopRequireDefault","require","_hooks","PopupState","_ref","children","popupId","variant","parentPopupState","disableAutoFocus","popupState","usePopupState","result","propTypes","PropTypes","func","isRequired","string","oneOf","object","bool"],"sources":["src/index.ts"],"sourcesContent":["import PropTypes from 'prop-types'\n\nimport {\n  usePopupState,\n  anchorRef,\n  bindTrigger,\n  bindContextMenu,\n  bindToggle,\n  bindHover,\n  bindFocus,\n  bindMenu,\n  bindPopover,\n  bindPopper,\n  bindDoubleClick,\n  bindDialog,\n  type Variant,\n  type PopupState as InjectedProps,\n} from './hooks'\n\nexport {\n  anchorRef,\n  bindTrigger,\n  bindContextMenu,\n  bindToggle,\n  bindHover,\n  bindFocus,\n  bindMenu,\n  bindPopover,\n  bindPopper,\n  bindDoubleClick,\n  bindDialog,\n  type Variant,\n  type InjectedProps,\n}\n\nexport type Props = {\n  popupId?: string\n  children: (props: InjectedProps) => any\n  variant: Variant\n  parentPopupState?: InjectedProps | null\n  disableAutoFocus?: boolean | null\n}\n\nexport default function PopupState({\n  children,\n  popupId,\n  variant,\n  parentPopupState,\n  disableAutoFocus,\n}: Props): any {\n  const popupState = usePopupState({\n    popupId,\n    variant,\n    parentPopupState,\n    disableAutoFocus,\n  })\n  const result = children(popupState)\n  return result != null ? result : null\n}\n\nPopupState.propTypes = {\n  /**\n   * The render function.\n   *\n   * @param {object} props the properties injected by `PopupState`:\n   * <ul>\n   *   <li>`open(eventOrAnchorEl)`: opens the popup</li>\n   *   <li>`close()`: closes the popup</li>\n   *   <li>`toggle(eventOrAnchorEl)`: opens the popup if it is closed, or\n   *     closes the popup if it is open.\n   *   </li>\n   *   <li>`setOpen(open, [eventOrAnchorEl])`: sets whether the popup is open.\n   *     `eventOrAnchorEl` is required if `open` is truthy.\n   *   </li>\n   *   <li>`isOpen`: `true`/`false` if the popup is open/closed</li>\n   *   <li>`anchorEl`: the current anchor element (`null` the popup is closed)</li>\n   *   <li>`popupId`: the `popupId` prop you passed</li>\n   * </ul>\n   *\n   * @returns {React.Node} the content to display\n   */\n  children: PropTypes.func.isRequired,\n  /**\n   * The `id` property to use for the popup.  Will be passed to the render\n   * function as `bindPopup.id`, and also used for the `aria-controls` property\n   * passed to the trigger component via `bindTrigger`.\n   */\n  popupId: PropTypes.string,\n  /**\n   * Which type of popup you are controlling.  Use `'popover'` for `Popover`\n   * and `Menu`; use `'popper'` for `Popper`s.  Right now this only affects\n   * whether `aria-controls` or `aria-describedby` is used on the trigger\n   * component.\n   */\n  variant: PropTypes.oneOf(['popover', 'popper']).isRequired,\n  /**\n   * The popupState of the parent menu (for cascading menus)\n   */\n  parentPopupState: PropTypes.object,\n  /**\n   * Will focus the popup when it opens unless disableAutoFocus is explicitly false.\n   */\n  disableAutoFocus: PropTypes.bool,\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,UAAA,GAAAC,sBAAA,CAAAC,OAAA;AAEA,IAAAC,MAAA,GAAAD,OAAA;AAyCe,SAASE,UAAUA,CAAAC,IAAA,EAMnB;EAAA,IALbC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IACRC,OAAO,GAAAF,IAAA,CAAPE,OAAO;IACPC,OAAO,GAAAH,IAAA,CAAPG,OAAO;IACPC,gBAAgB,GAAAJ,IAAA,CAAhBI,gBAAgB;IAChBC,gBAAgB,GAAAL,IAAA,CAAhBK,gBAAgB;EAEhB,IAAMC,UAAU,GAAG,IAAAC,oBAAa,EAAC;IAC/BL,OAAO,EAAPA,OAAO;IACPC,OAAO,EAAPA,OAAO;IACPC,gBAAgB,EAAhBA,gBAAgB;IAChBC,gBAAgB,EAAhBA;EACF,CAAC,CAAC;EACF,IAAMG,MAAM,GAAGP,QAAQ,CAACK,UAAU,CAAC;EACnC,OAAOE,MAAM,IAAI,IAAI,GAAGA,MAAM,GAAG,IAAI;AACvC;AAEAT,UAAU,CAACU,SAAS,GAAG;EACrB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACER,QAAQ,EAAES,qBAAS,CAACC,IAAI,CAACC,UAAU;EACnC;AACF;AACA;AACA;AACA;EACEV,OAAO,EAAEQ,qBAAS,CAACG,MAAM;EACzB;AACF;AACA;AACA;AACA;AACA;EACEV,OAAO,EAAEO,qBAAS,CAACI,KAAK,CAAC,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAACF,UAAU;EAC1D;AACF;AACA;EACER,gBAAgB,EAAEM,qBAAS,CAACK,MAAM;EAClC;AACF;AACA;EACEV,gBAAgB,EAAEK,qBAAS,CAACM;AAC9B,CAAC","ignoreList":[]}
